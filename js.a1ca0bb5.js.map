{"version":3,"sources":["js/utils/transforms.js","js/alg/p1-vernam.js","js/utils/alph-p2.json","js/alg/p2-vigenere.js","js/alg/p3-rc4.js","js/alg/p4-a5-1.js","js/alg/p5-gen-e0.js","js/alg/p6-multi-snow3g-y-aes.js","js/alg/p7-rijndael.js","js/utils/byte-multipliers.js","js/utils/rijndael.js","js/alg/p8-cbc.js","js/alg/p9-diffle-hellman.js","js/alg/p10-fiat-shamir.js","js/alg/p11-rsa.js","js/alg/p12-gamal-eliptico.js","js/alg/p13-chacha20.js","js/alg/p14-gen-ca-gps.js","js/index.js"],"names":["ints","fromString","msg","split","map","char","charCodeAt","fromHexs","arr_hex","Array","isArray","byte","parseInt","fromBins","arr_bin","hexs","fromInts","arr_int","mode","toString","length","Number","bins","repeat","str","i","String","fromCharCode","p1","format","plaintext","key","intsMsg","generate_key","intskey","join","msgbin","res","console","log","it","ix","aux","Math","round","random","push","$","is","val","html","module","exports","alph","p2","toUpperCase","cond","replace","intsCond","intsInAlph","lkey","lengthenKey","intsLkey","result","char2int","filter","el","int","num","find","toMessage","hello","cipher_key","Plaintext","MainLog","factors","results","ByteMultiplier","algorithmByte","mainLog","subLog","multiply","byteA_","byteB_","decomposeByte","subMult","multiplyByFactor","byte_","toByteBits","forEach","bit","index","factor","fill","unshift","f","toByte","factor_","oneIndex","indexOf","factorLog","rotateLeft","resultLog","xorByteBits","operation","byteBitsA","byteBitsB","prototype","padStart","b","rightFeedBack","shift","Aes","byteMultiplier","Nb","numOfRounds","state","Sbox","RC","mixColumnMatrix","toMatrix","settedKey","k","j","transposeMatrix","matrix","transposedMatrix","_","colIndex","row","XORmultiplyMatrixByColumn","column","reduce","AddRoundKey","xor","ByteSub","ShiftRow","shifted","roundLeft","MixColumn","transposedState","array1","array2","expandKey","rcIndex","expandedKey","words","keyLastColumn","getSubkeys","subkeys","times","cipher","Flatkey","clearText","subkey","flat","Infinity","decrypt","swap","a","splice","p8","iv","prompt","bloques","separarEnBloques","bloque","aes","cifrados","cs","cypherStealing","concat","apply","tmp","cifra","descifrados","nivel","prevc","bytesMinor","dif","sub","slice","pop","p13","p14","disable","objs","p3","p4","p5","p6","p7","p9","p10","p11","p12","formato","enc","des","ej","attr","active","removeAttr","createEncrypt","obj","tag","click","text","clear","encrypt","render","createDecrypt","children","innerHTML","change"],"mappings":"AaEK,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,aCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,SCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,ECAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,ECAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,GCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,KCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,aCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,GCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,MCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,ICAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,UCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,qCCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,OCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,eCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,QCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,aCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,CCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,OCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,ICAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,QCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,aCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,ECFgBuE,ACAAA,ACAAA,ACAAgH,ACAAC,AZAAjH,ACAAA,ACAAA,ACAAA,AIAAA,ICAAA,ACAAA,ACAAA,ACAAgH,ACAAC,AZAAjH,ACAAA,ACAAA,ACAAA,AIAAA,ECCjB,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,SCAYC,ACAAA,ACAAA,ACAAA,ACAAA,AZAAA,ACAAA,ACAAA,ACAAA,AIAAA,ECAAA,ACAAA,ACAAA,ACAAA,ACAAA,AZAAA,ACAAA,ACAAA,ACAAA,AIAAA,ECAYC,ACAAA,ACAAA,ACAAA,ACAAA,AZAAA,ACAAA,ACAAA,ACAAA,AIAAA,ECAWvD,ACAAA,ACAAA,ACAAA,ACAAA,AZAAA,ACAAA,ACAAA,ACAAA,AIAAA,GCAM,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,ECAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,KCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,ICCxC,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,QCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA,QCAA,ACAA,ACAA,ACAA,ACAA,AZAA,ACAA,ACAA,ACAA,AIAA;AZkEL,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,QAAA,KAAA,QAAA,KAAA,QAAA,UAAA,EApEA,IAAIlB,EAAO,CACPC,WAAWC,SAAAA,GACAA,OAAAA,EAAIC,MAAM,IAAIC,IAAI,SAACC,GACfA,OAAAA,EAAKC,WAAW,MAI/BC,SAASC,SAAAA,GACF,OAACC,MAAMC,QAAQF,GAEPA,EAAQJ,IAAI,SAACO,GACb,MAAe,iBAARA,EAAyBC,SAASD,EAAK,IACrCA,IAJeC,SAASJ,EAAQ,KASxDK,SAASC,SAAAA,GACF,OAACL,MAAMC,QAAQI,GAEPA,EAAQV,IAAI,SAACO,GACTC,OAAAA,SAASD,EAAK,KAHMC,SAASE,EAAQ,KAkD5D,QAAA,KAAA,EAzCA,IAAIC,EAAO,CACPC,SAASC,SAAAA,EAASC,GACX,OAACT,MAAMC,QAAQO,GAYPA,EAAQb,IAAI,SAACO,GACbA,OAAAA,EAAKQ,SAAS,IAAIC,OAAS,EAAU,IAAIT,EAAKQ,SAAS,IAClBR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","file":"js.a1ca0bb5.js","sourceRoot":"..\\src","sourcesContent":["var ints = {\r\n    fromString(msg) {\r\n        return msg.split('').map((char) => {\r\n            return char.charCodeAt(0);\r\n        });\r\n    },\r\n\r\n    fromHexs(arr_hex) {\r\n        if(!Array.isArray(arr_hex)) return parseInt(arr_hex,16);\r\n        else {\r\n            return arr_hex.map((byte) => {\r\n                if(typeof byte == 'string') return parseInt(byte,16);\r\n                else return byte;                \r\n            });\r\n        }\r\n    },\r\n\r\n    fromBins(arr_bin) {\r\n        if(!Array.isArray(arr_bin)) return parseInt(arr_bin,2);\r\n        else {\r\n            return arr_bin.map((byte) => {\r\n                return parseInt(byte,2);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nvar hexs = {\r\n    fromInts(arr_int, mode) {\r\n        if(!Array.isArray(arr_int)) {\r\n            if(mode == \"number\") {\r\n                if(arr_int.toString(16).length < 2) return Number(`0x0${arr_int.toString(16)}`);\r\n                else                                return Number(`0x${arr_int.toString(16)}`);\r\n            } else {\r\n                //console.log(\"entró aquí\",arr_int,mode,`${arr_int.toString(16)}`);\r\n                if(arr_int.toString(16).length < 2) return (`0${arr_int.toString(16)}`);\r\n                else                                return (`${arr_int.toString(16)}`);\r\n            }\r\n            \r\n        } \r\n        else {\r\n            return arr_int.map((byte) => {\r\n                if(byte.toString(16).length < 2) return \"0\"+byte.toString(16);\r\n                else                             return byte.toString(16);\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    fromString(msg)   { return this.fromInts(ints.fromString(msg));   },\r\n    fromBins(arr_bin) { return this.fromInts(ints.fromBins(arr_bin)); }\r\n}\r\n\r\n\r\nvar bins = {\r\n    fromInts(arr_int) {\r\n        if(!Array.isArray(arr_int)) return \"0\".repeat(8 - arr_int.toString(2).length) + arr_int.toString(2);\r\n        else {\r\n            return arr_int.map((byte) => {\r\n                return \"0\".repeat(8 - byte.toString(2).length) + byte.toString(2);\r\n            });\r\n        } \r\n    },\r\n\r\n    fromString(msg)   { return this.fromInts(ints.fromString(msg));   },\r\n    fromHexs(arr_hex) { return this.fromInts(ints.fromHexs(arr_hex)); }\r\n}\r\n\r\nvar str  ={\r\n    fromInts(arr_int) {\r\n        if(!Array.isArray(arr_int)) return String.fromCharCode(arr_int);\r\n        else {\r\n            return arr_int.map((byte,i) => {\r\n                return String.fromCharCode(byte);\r\n            });\r\n        }     \r\n    },\r\n\r\n    fromHexs(arr_hex) { return this.fromInts(ints.fromHexs(arr_hex)); },\r\n    fromBins(arr_bin) { return this.fromInts(ints.fromBins(arr_bin)); }\r\n}\r\n\r\nexport { ints, hexs, bins, str }","import { ints, hexs, bins, str } from '../utils/transforms';\r\n\r\nexport default class p1 { // vernam\r\n    constructor(format, plaintext, key) {\r\n        if(format == \"srt\") {this.intsMsg = ints.fromString(plaintext)}\r\n        if(format == \"hex\") {this.intsMsg = ints.fromHexs(plaintext)}\r\n        if(format == \"int\") {}\r\n        if(format == \"bin\") {this.intsMsg = ints.fromBins(plaintext)}\r\n        \r\n\r\n        // gestion de los inputs\r\n        this.key = bins.fromString(key);\r\n        this.generate_key();\r\n        this.intskey = ints.fromString(str.fromBins(this.key).join(''));\r\n\r\n        this.msgbin = bins.fromString(plaintext);\r\n        this.res = ints.fromString(plaintext);\r\n\r\n        // mensajes consola\r\n        console.log(`\"${plaintext}\":`, this.msgbin.join(''), this.msgbin.join('').length);\r\n        console.log(`\"${str.fromBins(this.key).join('')}\":`, this.key.join(''), this.key.join('').length);\r\n    }\r\n\r\n    encrypt() {\r\n       return this.res.map((it,ix) => {\r\n        return it ^ this.intskey[ix];\r\n       }); \r\n    }\r\n\r\n    generate_key() {\r\n        let res = [], aux = '';\r\n        this.intsMsg.map((it,ix) => {\r\n            aux = '';\r\n            for(let i = 0; i < 8; i++) aux += Math.round(Math.random()).toString();\r\n            res.push(aux);\r\n        });\r\n        if($('#manual').is(':checked') && (!$(\"#cipherkey\").val())) {\r\n            this.key = res;\r\n            $(\"#cipherkey\").html(str.fromBins(this.key));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(str.fromInts(this.res));\r\n        $(`#res-bin`).html(bins.fromInts(this.res).join(', '));\r\n        $(`#res-hex`).html(hexs.fromInts(this.res).join(', '));\r\n        $(`#res-int`).html(this.res.join(', '));\r\n    }\r\n}","module.exports={alph:[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]};","import { ints, hexs, bins, str } from '../utils/transforms';\r\nimport { alph } from '../utils/alph-p2.json';\r\n\r\nexport default class p2 {\r\n    constructor(format, plaintext, key) {\r\n        this.msg = plaintext.toUpperCase();\r\n        this.cond = this.msg.replace(/\\s/g, '');\r\n        this.intsCond = this.intsInAlph(this.cond);\r\n\r\n        // claves \r\n        this.key = key.toUpperCase();\r\n        this.lkey = this.lengthenKey();\r\n        this.intsLkey = this.intsInAlph(this.lkey);\r\n\r\n        console.log(this.cond, this.intsCond);\r\n        console.log(this.lkey, this.intsLkey);\r\n    }\r\n\r\n    lengthenKey() {\r\n        let result = '', aux = 0;\r\n        this.cond.split('').map((it,ix) => {     \r\n            result += this.key[aux];\r\n            (aux == this.key.length-1) ? aux = 0 : aux++;  \r\n        });\r\n        return result;\r\n    }\r\n\r\n    encrypt() {\r\n        let res = this.intsCond.map((it,ix) => { // Mapeo el mensaje origen                    \r\n            return ((it + this.intsLkey[ix]) % 26);              // Aplico la función vigenere\r\n        });\r\n        return res;\r\n    }\r\n\r\n    decrypt()\r\n    {\r\n        var et = 0;\r\n        return this.intsCond.map((it,ix) => {                // mapeo mensaje cifrado y desenredo la función de vigenere\r\n            if((((it+26) - this.intsLkey[ix]) >= 26)) return ((it+26)%26 - this.intsLkey[ix]); \r\n            else                                      return ((it+26)    - this.intsLkey[ix]);                         \r\n        }); \r\n    }\r\n\r\n    intsInAlph(str) {\r\n        return str.split('').map((char) => {             // Mapeo el mensaje\r\n            if(char != ' ') return this.char2int(char); // Convierto a decimal caracter por caracter           \r\n        }).filter(function (el) { return el != null;});  // se retorna un array con los enteros \r\n    }\r\n\r\n    toMessage(msg)\r\n    {\r\n        return msg.map((int) => {        // mapeo el mensaje\r\n            return alph[int];            // Paso binario a entero y de entero a caracter \r\n        }).join('')                      // Concateno (elementos de array) para formar una cadena\r\n    }\r\n\r\n    char2int(char) \r\n    {\r\n        var num;\r\n        return alph.map((it, ix) => {\r\n            if(it === char) {\r\n                num = ix;\r\n                return num;\r\n            } \r\n        }).find(el => el === num); // reducción de array a entero \r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(this.toMessage(this.res));\r\n        $(`#res-bin`).html(bins.fromString(this.toMessage(this.res)).join(', '));\r\n        $(`#res-hex`).html(hexs.fromString(this.toMessage(this.res)).join(', '));\r\n        $(`#res-int`).html(ints.fromString(this.toMessage(this.res)).join(', '));\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","\r\nexport const MainLog = function() {\r\n  this.factors = [];\r\n  this.results = [];\r\n};\r\n\r\n\r\nexport const ByteMultiplier = function(algorithmByte) {\r\n  this.algorithmByte = algorithmByte;\r\n  this.mainLog = new MainLog();\r\n  this.subLog = [];\r\n  \r\n\r\n  /**\r\n   * Performs byte multiplication using algorithmByte\r\n   * @param {number} byteA_ \r\n   * @param {number} byteB_ \r\n   * @return {number} multiplication of two bytes\r\n   */\r\n  this.multiply = function(byteA_, byteB_) {\r\n    \r\n    // Logging\r\n    this.mainLog = new MainLog();\r\n    this.subLog = [];\r\n\r\n    // Decomposing into factors\r\n    const factors = this.decomposeByte(byteB_);\r\n\r\n    // Logging\r\n    this.mainLog.factors = [...factors];\r\n\r\n    // Calculating product\r\n    let result = 0;\r\n    for (let i = 0; i < factors.length; i++) {\r\n      const subMult = this.multiplyByFactor(byteA_, factors[i]);\r\n      this.mainLog.results.push(subMult);\r\n      result ^= subMult;\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Decompose a byte into it's factors\r\n   * @param {number} byte_ \r\n   * @return {Array<number>}\r\n   */\r\n  this.decomposeByte = function(byte_) {\r\n    const factors = [];\r\n    byte_.toByteBits().forEach((bit, index) => {\r\n      if (bit === 1) {\r\n        const factor = new Array(8).fill(0);\r\n        factor[index] = 1;\r\n        factors.unshift(factor);\r\n      }\r\n    });\r\n    return factors.map((f) => f.toByte());\r\n  };\r\n\r\n  /**\r\n   * Performs a multiplication between byte_ and factor_. \r\n   * @param {number} byte_ \r\n   * @param {number} factor_ A byte with only one 1.\r\n   * @return {number}\r\n   */\r\n  this.multiplyByFactor = function(byte_, factor_) {\r\n    if (factor_ === 1) {\r\n      return byte_;\r\n    }\r\n\r\n    let byte = byte_.toByteBits();\r\n    const factor = factor_.toByteBits();\r\n\r\n    const oneIndex = 7 - factor.indexOf(1);\r\n\r\n    // Logging\r\n    const factorLog = [byte_.toByteBits().join('')];\r\n\r\n    for (let i = 0; i < oneIndex; i++) {\r\n      if (byte[0] === 1) {\r\n        byte.rotateLeft();\r\n\r\n        // Logging\r\n        let resultLog = `${byte.join('')} + ${algorithmByte.toByteBits().join('')} = `;\r\n\r\n\r\n        byte = this.xorByteBits(byte, algorithmByte.toByteBits());\r\n\r\n        resultLog += `${byte.join('')}`;\r\n\r\n        // Logging\r\n        factorLog.push({operation: 'rotate & add', result: resultLog});\r\n      } else {\r\n        byte.rotateLeft();\r\n\r\n        // Logging\r\n        factorLog.push({operation: 'rotate', result: byte.join('')});\r\n      }\r\n    }\r\n\r\n    // Logging\r\n    this.subLog.push(factorLog);\r\n\r\n    return byte.toByte();\r\n  };\r\n\r\n  /**\r\n   * Performs a xor operation bettween two Arrays<1 | 0> of length 8 and returns the result\r\n   * @param {Array<1|0>} byteBitsA \r\n   * @param {Array<1|0>} byteBitsB \r\n   * @return {Array<1|0>} Result of xor operation between byteBitsA and byteBitsB\r\n   */\r\n  this.xorByteBits = function(byteBitsA, byteBitsB) {\r\n    const byteA = parseInt(byteBitsA.join(''), 2);\r\n    const byteB = parseInt(byteBitsB.join(''), 2);\r\n\r\n    return (byteA ^ byteB).toByteBits();\r\n  };\r\n\r\n  /**\r\n   * Converts the less significant byte of a number into \r\n   * an array of length 8 containning it's bits.\r\n   * @return {Array<1 | 0>} 0's and 1's array of length 8.\r\n   */\r\n  Number.prototype.toByteBits = function() {\r\n    const result = this & 0xff;\r\n    return result.toString(2).padStart(8, '0').split('').map((b) => parseInt(b));\r\n  };\r\n\r\n  /**\r\n   * Converts an array of length 8 containning 1's and 0's to a byte.\r\n   * @return {number}\r\n   */\r\n  Array.prototype.toByte = function () {\r\n    return parseInt(this.join(''), 2);\r\n  };\r\n\r\n\r\n  /**\r\n   * Rotates the invocant array to left using rightFeedBack\r\n   * @param {1 | 0} rightFeedBack \r\n   */\r\n  Array.prototype.rotateLeft = function(rightFeedBack = 0) {\r\n    this.shift();\r\n    this.push(rightFeedBack);\r\n  };\r\n\r\n};","import { ByteMultiplier } from './byte-multipliers.js';\r\n\r\nexport const Aes = function () {\r\n  /***********************************************************************************/\r\n  // Constantes\r\n  this.byteMultiplier = new ByteMultiplier(0x1b); // Multiplicador de bytes\r\n  this.Nb = 4; // Número de columnas\r\n  this.numOfRounds = 10; // Número de rondas\r\n  this.state = []; // Estado (intermedio)\r\n\r\n  // Caja S\r\n  this.Sbox = [\r\n    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\r\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\r\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\r\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\r\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\r\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\r\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\r\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\r\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\r\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\r\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\r\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\r\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\r\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\r\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\r\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,\r\n  ];\r\n\r\n  // Constantes de iteración\r\n  this.RC = [\r\n    [0x01, 0x00, 0x00, 0x00],\r\n    [0x02, 0x00, 0x00, 0x00],\r\n    [0x04, 0x00, 0x00, 0x00],\r\n    [0x08, 0x00, 0x00, 0x00],\r\n    [0x10, 0x00, 0x00, 0x00],\r\n    [0x20, 0x00, 0x00, 0x00],\r\n    [0x40, 0x00, 0x00, 0x00],\r\n    [0x80, 0x00, 0x00, 0x00],\r\n    [0x1B, 0x00, 0x00, 0x00],\r\n    [0x36, 0x00, 0x00, 0x00],\r\n  ]\r\n\r\n  // Matriz para multiplicación en MixColumn\r\n  this.mixColumnMatrix = [\r\n    [0x02, 0x03, 0x01, 0x01],\r\n    [0x01, 0x02, 0x03, 0x01],\r\n    [0x01, 0x01, 0x02, 0x03],\r\n    [0x03, 0x01, 0x01, 0x02],\r\n  ];\r\n\r\n  /***********************************************************************************/\r\n  // Objetos para loggear la información en la página\r\n  this.log = [];\r\n  \r\n\r\n  /***********************************************************************************/\r\n  // Métodos\r\n  /**\r\n   * Receives a Number[] representing the initial text\r\n   * @param {Number[]} key \r\n   * @returns A Number[][] square matrix. For example:\r\n   * Input: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n   * Output: [\r\n   *           [0,   1,  2,  3], \r\n   *           [4,   5,  6,  7],\r\n   *           [8,   9, 10, 11],\r\n   *           [12, 12, 14, 15],\r\n   *         ]\r\n   */\r\n  this.toMatrix = function (key) {\r\n    // Creates a copy of key\r\n    let settedKey = [];\r\n    for (let i = 0, k = 0; i < 4; i++) {\r\n      settedKey.push([]);\r\n      for (let j = 0; j < this.Nb; j++) {\r\n        settedKey[i].push(key[k++])\r\n      }\r\n    }\r\n    \r\n    return settedKey;\r\n  }\r\n\r\n  /**\r\n   * Recibe una matriz y devuelve su traspuesta.\r\n   * @param  matrix \r\n   */\r\n  this.transposeMatrix = function (matrix) {\r\n    let transposedMatrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\r\n    return transposedMatrix;\r\n  }\r\n\r\n  /**\r\n   * Multiplica una matriz por una columna y devuelve el resultado\r\n   */\r\n  this.XORmultiplyMatrixByColumn = function(matrix, column) {\r\n    const result = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      result.push([]);\r\n      for (let j = 0; j < this.Nb; j++) {\r\n        result[i].push(this.byteMultiplier.multiply(matrix[i][j], column[j]));\r\n      }\r\n    }\r\n    return result.map(row => row.reduce((result, val) => result ^ val));\r\n  }\r\n\r\n  /**\r\n   * Retorna el resultado de aplicar la operación AddRoundKey entre dos matrices (xor)\r\n   */\r\n  this.AddRoundKey = function (state, key) {\r\n    return state.map((row, i) => this.xor(row, key[i]));\r\n  };\r\n\r\n  /**\r\n   * Realiza la sustitución de un byte con la caja S\r\n   * @param  byte \r\n   * @returns \r\n   */\r\n  this.ByteSub = function (byte) {\r\n    return this.Sbox[byte];\r\n  }\r\n\r\n  /**\r\n   * Aplica la operación ShiftRow descrita en las especificaciones del AES\r\n   * Fila 0: 0 rotaciones, Fila 1: 1 rotación, etc...\r\n   */\r\n  this.ShiftRow = function (key) {\r\n    const shifted = key.map(row => [...row]);\r\n    for (let i = 0; i < this.Nb; i++) {\r\n      shifted[i].roundLeft(i);\r\n    }\r\n\r\n    return shifted;\r\n  }\r\n\r\n  /**\r\n   * Retorna el resultado de aplicar la operación MixColumn\r\n   * a la matris state\r\n   */\r\n  this.MixColumn = function (state) {\r\n    const result = []; \r\n    const transposedState = this.transposeMatrix(state);\r\n    for (let i = 0; i < this.mixColumnMatrix.length; i++) {     \r\n         result.push(this.XORmultiplyMatrixByColumn(this.mixColumnMatrix, transposedState[i]))\r\n    }\r\n\r\n    return this.transposeMatrix(result);\r\n  }\r\n\r\n  /**\r\n   * Recibe dos vectores de igual longitud y retorna el resultado de aplicar la operación xor\r\n   * elemento a elemento.\r\n   */\r\n  this.xor = function(array1, array2) {\r\n    return array1.map((byte, index) => byte ^ array2[index]);\r\n  }\r\n\r\n  /**\r\n   * Obtiene una subclave a partir otra\r\n   * @param key Matriz de 4 x 4 bytes\r\n   * @param rcIndex ïndice de la constante\r\n   * @returns subKey Matriz de 4 x 4 bytes\r\n   */\r\n  this.expandKey = function (key, rcIndex) {\r\n\r\n    let expandedKey = [];\r\n    let words = this.transposeMatrix(key);\r\n    const keyLastColumn = [...words[words.length - 1]];\r\n\r\n    words[words.length - 1].roundLeft();\r\n    words[words.length - 1] = words[key.length - 1].map(byte => this.ByteSub(byte));\r\n    \r\n\r\n    expandedKey.push(this.xor(this.xor(words[0], words[words.length - 1]), this.RC[rcIndex]));\r\n    words[words.length - 1] = keyLastColumn;\r\n\r\n    for (let i = 1; i < 4; i++) {\r\n      expandedKey.push(this.xor(words[i], expandedKey[i - 1]));\r\n    }\r\n\r\n    return this.transposeMatrix(expandedKey);\r\n  }\r\n\r\n  /**\r\n   * Devuelve 10 subclaves obtenidas a partir de la clave original\r\n   * @param  key \r\n   * @returns \r\n   */\r\n  this.getSubkeys = function(key) {\r\n    const subkeys = [[...key]];\r\n    for (let i = 0; i < this.numOfRounds; i++) {\r\n      subkeys.push(this.expandKey(subkeys[i], i));\r\n    }\r\n    return subkeys;\r\n  }\r\n\r\n  Array.prototype.roundLeft = function (times = 1) {\r\n    for (let i = 0; i < times; i++) this.push(this.shift());\r\n  }\r\n\r\n  /**\r\n   * Cifra un bloque de texto de 16 elementos\r\n   * @param {number[]} key 128 bits\r\n   * @param {number[]} clearText \r\n   */\r\n  this.cipher = function (Flatkey, clearText) {\r\n    const key = this.transposeMatrix(this.toMatrix(Flatkey)); // Pasamos la entrada a matriz y luego obtenemos la transpuesta\r\n    const subkeys = this.getSubkeys(key); // Cálculo de subclaves\r\n\r\n    // Ronda inicial\r\n    this.state = this.AddRoundKey(key, this.transposeMatrix(this.toMatrix(clearText)));\r\n    \r\n    // Logging\r\n    this.log = [];\r\n    this.log.push({subkey: subkeys[0], state: this.state});\r\n\r\n    //Ronda estándar\r\n    for (let i = 1; i < this.numOfRounds; i++) {\r\n      this.state = this.state.map(row => row.map(byte => this.ByteSub(byte))); // ByteSub\r\n      this.state = this.ShiftRow(this.state); // ShiftRow\r\n      this.state = this.MixColumn(this.state); // MixColumn\r\n      this.state = this.AddRoundKey(this.state, subkeys[i]); // AddRound key\r\n      this.log.push({subkey: subkeys[i], state: this.state}); // Logging\r\n    }\r\n\r\n    //Ronda final\r\n    this.state = this.state.map(row => row.map(byte => this.ByteSub(byte))); // ByteSub\r\n    this.state = this.ShiftRow(this.state); //ShiftRow\r\n    this.state = this.AddRoundKey(this.state, subkeys[subkeys.length - 1]); //AddRoundKey\r\n    this.log.push({subkey: subkeys[10], state: this.state}); // Logging\r\n\r\n    return this.transposeMatrix(this.state).flat(Infinity);\r\n  };\r\n\r\n  /**\r\n   * Cifra un bloque de texto de 16 elementos\r\n   * @param {number[]} key 128 bits\r\n   * @param {number[]} clearText \r\n   */\r\n  this.decrypt = function (Flatkey, clearText) {\r\n    const key = this.transposeMatrix(this.toMatrix(Flatkey));\r\n    const subkeys = this.getSubkeys(key);\r\n    this.state = this.AddRoundKey(key, this.transposeMatrix(this.toMatrix(clearText)));\r\n\r\n    // Logging\r\n    this.log = [];\r\n    this.log.push({subkey: subkeys[0], state: this.state});\r\n\r\n    //Ronda inicial\r\n    this.state = this.AddRoundKey(this.state, subkeys[subkeys.length - 1]); //AddRoundKey\r\n    this.state = this.ShiftRow(this.state); //ShiftRow\r\n    this.state = this.state.map(row => row.map(byte => this.ByteSub(byte))); // ByteSub\r\n    this.log.push({subkey: subkeys[10], state: this.state}); // Logging\r\n\r\n    //Ronda estándar\r\n    for (let i = 1; i < this.numOfRounds; i++) {\r\n        this.state = this.AddRoundKey(this.state, subkeys[i]); // AddRound key\r\n        this.state = this.MixColumn(this.state); // MixColumn\r\n        this.state = this.ShiftRow(this.state); // ShiftRow\r\n        this.state = this.state.map(row => row.map(byte => this.ByteSub(byte))); // ByteSub\r\n        this.log.push({subkey: subkeys[i], state: this.state}); // Logging\r\n    }\r\n\r\n    return this.transposeMatrix(this.state).flat(Infinity);\r\n  }\r\n\r\n\r\n};\r\n\r\n","import { ints, hexs, bins, str } from '../utils/transforms';\r\nimport { Aes } from '../utils/rijndael';\r\n\r\nArray.prototype.swap = function(a, b){\r\n    this[a] = this.splice(b, 1, this[a])[0];\r\n    return this;\r\n}\r\n\r\nexport default class p8 {\r\n    constructor(format, plaintext, key) { // str,str,str\r\n        // array de bloques(arrays) - HEXS\r\n        if(format == \"srt\") {\r\n            this.iv = prompt(\"Introduce el IV\", \"AAAAAAAAAAAAAAAA\");\r\n            this.intsMsg = ints.fromString(plaintext);\r\n            this.key     = ints.fromString(key);               \r\n            this.iv      = ints.fromString(this.iv);   \r\n        }\r\n        if(format == \"hex\") {\r\n            this.iv = prompt(\"Introduce el IV\", \"00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00\");\r\n            this.intsMsg = ints.fromHexs(plaintext.split(','));\r\n            this.key     = ints.fromHexs(key.split(','));               \r\n            this.iv      = ints.fromHexs(this.iv.split(','));           \r\n        }\r\n        if(format == \"bin\") {\r\n            this.iv = prompt(\"Introduce el IV\", \"000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,\");\r\n            this.intsMsg = ints.fromBins(plaintext.split(','));\r\n            this.key     = ints.fromBins(key.split(','));               \r\n            this.iv      = ints.fromBins(this.iv.split(','));\r\n        }\r\n        this.bloques = this.separarEnBloques(plaintext); \r\n        \r\n        // mostrar los valores iniciales\r\n        console.log(\"Clave\", this.key);\r\n        console.log(\"IV\", this.iv);\r\n        this.bloques.map((bloque,i) => {console.log(`Plaintext B${i}`, bloque);});\r\n        \r\n        // resultado final\r\n        this.res = ints.fromHexs(plaintext);\r\n    }\r\n\r\n    encrypt() {\r\n        const aes = new Aes();\r\n        var xor = [];\r\n        var cifrados = [];\r\n        var key = this.key;\r\n    \r\n        this.bloques.map((bloque,i) => {\r\n            xor = [];\r\n            if(i == 0) {\r\n                xor = ints.fromHexs(bloque).map((byte,j) => { return (byte ^ this.iv[j]); }); \r\n                cifrados.push(aes.cipher(key,xor));  // agregar bloque cifrado AES\r\n            } else {\r\n                if (bloque.length == 16) {\r\n                    xor = ints.fromHexs(bloque).map((byte,j) => { return (byte ^ cifrados[i-1][j]); }); \r\n                    cifrados.push(aes.cipher(key,xor));  // agregar bloque cifrado AES\r\n                } else {\r\n                    var cs = this.cypherStealing(i,cifrados[i-1]);\r\n                    xor = ints.fromHexs(cs).map((byte,j) => { return (byte ^ cifrados[i-1][j]); }); \r\n                    cifrados.push(aes.cipher(key,xor));\r\n                    cifrados.swap(i,i-1);\r\n                } \r\n                \r\n            }\r\n                       \r\n        });\r\n\r\n        console.log(cifrados);\r\n        return [].concat.apply([], cifrados);\r\n    }\r\n\r\n    separarEnBloques(plaintext) { // separar en bloques de 16 bytes\r\n        var tmp = [];\r\n        var result = [];\r\n        this.intsMsg.map((byte,i) => { // se mapea la cadena completa\r\n            tmp.push(byte); // recarco array temporal de 16 de longitud\r\n            if(i%16 == 15 || (i+1) == this.intsMsg.length) { // al llegar a mod16 o al final inserto eslabón \r\n                result.push(tmp);\r\n                tmp = [];\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    decrypt() {\r\n        const aes = new Aes();\r\n        var key = this.key;\r\n        var cifra, xor, descifrados = [];\r\n        this.bloques.map((bloque,i) => {\r\n            cifra = (i == 0)? this.iv : this.bloques[i-1];\r\n            xor = cifra.map(byte => { return (byte ^ aes.decrypt(key,cifra));});\r\n            descifrados.push(xor);\r\n        });\r\n\r\n        return [].concat.apply([], descifrados);;\r\n    }\r\n\r\n    cypherStealing(nivel,prevc) {\r\n        //console.log(hexs.fromInts(this.bloques[nivel]),hexs.fromInts(prevc))\r\n        \r\n        var bytesMinor = this.bloques[nivel].length; // byte del bloque pequeño\r\n        var bytesMayor = prevc.length;               // bytes del cifrado anterior\r\n        var dif = bytesMayor - bytesMinor;           // diferencia\r\n\r\n        var sub = prevc.slice(bytesMinor,bytesMinor+dif); // extraer el sub array extra del cifrado anterior\r\n        for(var i = 0; i < dif; i++) prevc.pop();         // eliminar esos elementos del cifrado anterior\r\n        \r\n        return [].concat.apply(this.bloques[nivel], sub);        \r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(str.fromInts(this.res));\r\n        $(`#res-bin`).html(bins.fromInts(this.res).join(', '));\r\n        $(`#res-hex`).html(hexs.fromInts(this.res).join(', '));\r\n        $(`#res-int`).html(this.res.join(', '));\r\n    }\r\n}\r\n\r\n","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class p13 {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class p14 {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","import { ints, hexs, bins, str } from './utils/transforms';\r\n\r\nimport p1  from './alg/p1-vernam';\r\nimport p2  from './alg/p2-vigenere';\r\nimport p3  from './alg/p3-rc4';\r\nimport p4  from './alg/p4-a5-1';\r\nimport p5  from './alg/p5-gen-e0';\r\nimport p6  from './alg/p6-multi-snow3g-y-aes';\r\nimport p7  from './alg/p7-rijndael';\r\nimport p8  from './alg/p8-cbc';\r\nimport p9  from './alg/p9-diffle-hellman';\r\nimport p10 from './alg/p10-fiat-shamir';\r\nimport p11 from './alg/p11-rsa';\r\nimport p12 from './alg/p12-gamal-eliptico';\r\nimport p13 from './alg/p13-chacha20';\r\nimport p14 from './alg/p14-gen-ca-gps';\r\n\r\ndisable(1,1,1,1,1,1);\r\nvar objs = [ 0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14 ]\r\n\r\n// selectores\r\n\r\n\r\n// listeners\r\n$('#algoritmo').children().map(it => createEncrypt(objs[it],  $('#algoritmo').children()[it].innerHTML));\r\n$('#algoritmo').children().map(it => createDecrypt(objs[it],  $('#algoritmo').children()[it].innerHTML));\r\n\r\nif ($('#ej1').is(':checked')) {\r\n    $('#ej2').attr('disabled','disabled');\r\n} else {\r\n}\r\n\r\n// inicialización\r\n$('#algoritmo').change(() => {\r\n    switch($('#algoritmo option:selected').val()) {\r\n        case \"1\": \r\n            active(1,1,1,1,1,1);\r\n            disable(0,0,1,0,0,0);  \r\n            $(\"#formato\").val('srt');\r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"1\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        $(`#plaintext`).html(\"SOL\");\r\n                        $(`#cipherkey`).html(str.fromBins([\"00111100\", \"00011000\", \"01110011\"]).join(''));\r\n                    } \r\n                    if($('#ej2').is(':checked')) {\r\n                        $(`#plaintext`).html(\"[t\");\r\n                        $(`#cipherkey`).html(str.fromBins([\"00001111\", \"00100001\"]).join(''));\r\n                    }     \r\n                }\r\n            }); \r\n\r\n            ; break;\r\n            \r\n        case \"2\": \r\n            active(1,1,1,1,1,1);\r\n            disable(0,0,0,0,0,0);  \r\n            $(\"#formato\").val('srt');\r\n            $('#ej2').attr('disabled','disabled');\r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"2\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        $(`#plaintext`).html(\"ESTE MENSAJE SE AUTODESTRUIRA\");\r\n                        $(`#cipherkey`).html(\"MISION\");\r\n                    } \r\n                }\r\n            }); \r\n            ; break;\r\n\r\n        case \"3\": \r\n            ; break;\r\n\r\n        case \"4\":\r\n            ; break;\r\n\r\n        case \"5\":\r\n            ; break;\r\n\r\n        case \"6\":\r\n            ; break;\r\n\r\n        case \"7\":\r\n            ; break;\r\n\r\n        case \"8\":\r\n            active(1,1,1,1,1,1);\r\n            disable(1,0,0,0,0,0); \r\n            $(\"#formato\").val('hex');\r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"8\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        disable(0,0,1,0,0,0); \r\n                        $(`#plaintext`).html(([\r\n                            \"00\", \"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \r\n                            \"88\", \"99\", \"AA\", \"BB\", \"CC\", \"DD\", \"EE\", \"FF\", \r\n                            \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \r\n                            \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"\r\n                        ]).join(', '));\r\n                        $(`#cipherkey`).html(([\r\n                            \"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\r\n                            \"08\",\"09\",\"0A\",\"0B\",\"0C\",\"0D\",\"0E\",\"0F\"\r\n                        ]).join(', '));\r\n                    } \r\n                    if($('#ej2').is(':checked')) {\r\n                        disable(0,0,1,0,0,0); \r\n                        $(`#plaintext`).html(([\r\n                            \"00\", \"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \r\n                            \"88\", \"99\", \"AA\", \"BB\", \"CC\", \"DD\", \"EE\", \"FF\", \r\n                            \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \r\n                            \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"\r\n                        ]).join(', '));\r\n                        $(`#cipherkey`).html(([\r\n                            \"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\r\n                            \"08\",\"09\",\"0A\",\"0B\",\"0C\",\"0D\",\"0E\",\"0F\"\r\n                        ]).join(', '));\r\n                    }\r\n                    if($('#manual').is(':checked')) {\r\n                        active(0,0,1,0,0,0); \r\n                    }\r\n                }\r\n            }); \r\n\r\n            ; break;\r\n\r\n        case \"9\":\r\n            ; break;\r\n\r\n        case \"10\":\r\n            ; break;\r\n\r\n        case \"11\":\r\n            ; break;\r\n\r\n        case \"12\":\r\n            ; break;\r\n\r\n        default:\r\n            $('#cipherkey').attr('disabled','disabled');\r\n            $('#plaintext').attr('disabled','disabled');\r\n            $('#encrypt').attr('disabled','disabled');\r\n            ; break;\r\n\r\n    }\r\n});\r\n\r\nfunction disable(formato, plaintext, key, enc, des, ej) {\r\n    if(formato)   $('#formato').attr('disabled','disabled');\r\n    if(plaintext) $('#plaintext').attr('disabled','disabled');\r\n    if(key)       $('#cipherkey').attr('disabled','disabled');\r\n    if(enc)       $('#encrypt').attr('disabled','disabled');\r\n    if(des)       $('#decrypt').attr('disabled','disabled');\r\n    if(ej)        $('.form-check-input').attr('disabled','disabled');\r\n}\r\n\r\n\r\nfunction active(formato, plaintext, key, enc, des, ej) {\r\n    if(formato)   $('#formato').removeAttr('disabled');\r\n    if(plaintext) $('#plaintext').removeAttr('disabled');\r\n    if(key)       $('#cipherkey').removeAttr('disabled');\r\n    if(enc)       $('#encrypt').removeAttr('disabled');\r\n    if(des)       $('#decrypt').removeAttr('disabled');\r\n    if(ej)        $('.form-check-input').removeAttr('disabled');\r\n}\r\n\r\nfunction createEncrypt(obj, tag) {\r\n    $(`#encrypt`).click(() => {\r\n        if($('#algoritmo option:selected').text() == tag) {\r\n            console.clear();\r\n            let tmp = new obj($('#formato option:selected').val(), $(\"#plaintext\").val(), $(\"#cipherkey\").val());\r\n            tmp.res = tmp.encrypt();\r\n            tmp.render();\r\n        }\r\n    });    \r\n}\r\n\r\nfunction createDecrypt(obj, tag) {\r\n    $(`#decrypt`).click(() => {\r\n        if($('#algoritmo option:selected').text() == tag) {\r\n            let tmp = new obj($('#formato option:selected').val(), $(\"#plaintext\").val(), $(\"#cipherkey\").val());\r\n            tmp.res = tmp.decrypt();\r\n            tmp.render();\r\n        }\r\n    });    \r\n}"]}