{"version":3,"sources":["js/utils/transforms.js","js/alg/p1-vernam.js","js/utils/alph-p2.json","js/alg/p2-vigenere.js","js/alg/p3-rc4.js","js/alg/p4-a5-1.js","js/alg/p5-gen-e0.js","js/alg/p6-multi-snow3g-y-aes.js","js/alg/p7-rijndael.js","js/alg/p8-cbc.js","js/alg/p9-diffle-hellman.js","js/alg/p10-fiat-shamir.js","js/alg/p11-rsa.js","js/alg/p12-gamal-eliptico.js","js/index.js"],"names":["ints","fromString","msg","split","map","char","charCodeAt","fromHexs","arr_hex","Array","isArray","byte","parseInt","fromBins","arr_bin","hexs","fromInts","arr_int","mode","toString","length","Number","bins","repeat","str","i","String","fromCharCode","p1","format","plaintext","key","intsMsg","generate_key","intskey","join","msgbin","res","console","log","it","ix","aux","Math","round","random","push","$","is","val","html","module","exports","alph","p2","toUpperCase","cond","replace","intsCond","intsInAlph","lkey","lengthenKey","intsLkey","result","char2int","filter","el","int","num","find","toMessage","hello","cipher_key","Plaintext","disable","objs","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","formato","enc","des","ej","attr","active","removeAttr","createEncrypt","obj","tag","click","text","clear","tmp","encrypt","render","createDecrypt","decrypt","children","innerHTML","change"],"mappings":"AWEK,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,aCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,SCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,ECAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,ECAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,GCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,KCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,aCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,GCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,MCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,ICAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,UCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,qCCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,OCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,eCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,QCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,aCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,CCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,OCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,ICAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,QCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,aCAA,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,ECFgBuE,ACAAA,ACAAA,ARAAA,ACAAA,ACAAA,ACAAA,ACAAA,ACAAA,ICAAA,ACAAA,ACAAA,ARAAA,ACAAA,ACAAA,ACAAA,ACAAA,ACAAA,ECCjB,ACAA,ACAA,ARAA,ACAA,ACAA,ACAA,ACAA,ACAA,SCAYC,ACAAA,ACAAA,ARAAA,ACAAA,ACAAA,ACAAA,ACAAA,ACAAA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","file":"js.17a20aed.js","sourceRoot":"..\\src","sourcesContent":["var ints = {\r\n    fromString(msg) {\r\n        return msg.split('').map((char) => {\r\n            return char.charCodeAt(0);\r\n        });\r\n    },\r\n\r\n    fromHexs(arr_hex) {\r\n        if(!Array.isArray(arr_hex)) return parseInt(arr_hex,16);\r\n        else {\r\n            return arr_hex.map((byte) => {\r\n                return parseInt(byte,16);\r\n            });\r\n        }\r\n    },\r\n\r\n    fromBins(arr_bin) {\r\n        if(!Array.isArray(arr_bin)) return parseInt(arr_bin,2);\r\n        else {\r\n            return arr_bin.map((byte) => {\r\n                return parseInt(byte,2);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nvar hexs = {\r\n    fromInts(arr_int, mode) {\r\n        if(!Array.isArray(arr_int)) {\r\n            if(mode == \"number\") {\r\n                if(arr_int.toString(16).length < 2) return Number(`0x0${arr_int.toString(16)}`);\r\n                else                                return Number(`0x${arr_int.toString(16)}`);\r\n            } else {\r\n                if(arr_int.toString(16).length < 2) return (`0${arr_int.toString(16)}`);\r\n                else                                return (`${arr_int.toString(16)}`);\r\n            }\r\n            \r\n        } \r\n        else {\r\n            return arr_int.map((byte) => {\r\n                if(byte.toString(16).length < 2) return \"0\"+byte.toString(16);\r\n                else                             return byte.toString(16);\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    fromString(msg)   { return this.fromInts(ints.fromString(msg));   },\r\n    fromBins(arr_bin) { return this.fromInts(ints.fromBins(arr_bin)); }\r\n}\r\n\r\n\r\nvar bins = {\r\n    fromInts(arr_int) {\r\n        if(!Array.isArray(arr_int)) return \"0\".repeat(8 - arr_int.toString(2).length) + arr_int.toString(2);\r\n        else {\r\n            return arr_int.map((byte) => {\r\n                return \"0\".repeat(8 - byte.toString(2).length) + byte.toString(2);\r\n            });\r\n        } \r\n    },\r\n\r\n    fromString(msg)   { return this.fromInts(ints.fromString(msg));   },\r\n    fromHexs(arr_hex) { return this.fromInts(ints.fromHexs(arr_hex)); }\r\n}\r\n\r\nvar str  ={\r\n    fromInts(arr_int) {\r\n        if(!Array.isArray(arr_int)) return String.fromCharCode(arr_int);\r\n        else {\r\n            return arr_int.map((byte,i) => {\r\n                return String.fromCharCode(byte);\r\n            });\r\n        }     \r\n    },\r\n\r\n    fromHexs(arr_hex) { return this.fromInts(ints.fromHexs(arr_hex)); },\r\n    fromBins(arr_bin) { return this.fromInts(ints.fromBins(arr_bin)); }\r\n}\r\n\r\nexport { ints, hexs, bins, str }","import { ints, hexs, bins, str } from '../utils/transforms';\r\n\r\nexport default class p1 { // vernam\r\n    constructor(format, plaintext, key) {\r\n        if(format == \"srt\") {this.intsMsg = ints.fromString(plaintext)}\r\n        if(format == \"hex\") {this.intsMsg = ints.fromHexs(plaintext)}\r\n        if(format == \"int\") {}\r\n        if(format == \"bin\") {this.intsMsg = ints.fromBins(plaintext)}\r\n        \r\n\r\n        // gestion de los inputs\r\n        this.key = bins.fromString(key);\r\n        this.generate_key();\r\n        this.intskey = ints.fromString(str.fromBins(this.key).join(''));\r\n\r\n        this.msgbin = bins.fromString(plaintext);\r\n        this.res = ints.fromString(plaintext);\r\n\r\n        // mensajes consola\r\n        console.log(`\"${plaintext}\":`, this.msgbin.join(''), this.msgbin.join('').length);\r\n        console.log(`\"${str.fromBins(this.key).join('')}\":`, this.key.join(''), this.key.join('').length);\r\n    }\r\n\r\n    encrypt() {\r\n       return this.res.map((it,ix) => {\r\n        return it ^ this.intskey[ix];\r\n       }); \r\n    }\r\n\r\n    generate_key() {\r\n        let res = [], aux = '';\r\n        this.intsMsg.map((it,ix) => {\r\n            aux = '';\r\n            for(let i = 0; i < 8; i++) aux += Math.round(Math.random()).toString();\r\n            res.push(aux);\r\n        });\r\n        if($('#manual').is(':checked') && (!$(\"#cipherkey\").val())) {\r\n            this.key = res;\r\n            $(\"#cipherkey\").html(str.fromBins(this.key));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(str.fromInts(this.res));\r\n        $(`#res-bin`).html(bins.fromInts(this.res).join(', '));\r\n        $(`#res-hex`).html(hexs.fromInts(this.res).join(', '));\r\n        $(`#res-int`).html(this.res.join(', '));\r\n    }\r\n}","module.exports={alph:[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]};","import { ints, hexs, bins, str } from '../utils/transforms';\r\nimport { alph } from '../utils/alph-p2.json';\r\n\r\nexport default class p2 {\r\n    constructor(format, plaintext, key) {\r\n        this.msg = plaintext.toUpperCase();\r\n        this.cond = this.msg.replace(/\\s/g, '');\r\n        this.intsCond = this.intsInAlph(this.cond);\r\n\r\n        // claves \r\n        this.key = key.toUpperCase();\r\n        this.lkey = this.lengthenKey();\r\n        this.intsLkey = this.intsInAlph(this.lkey);\r\n\r\n        console.log(this.cond, this.intsCond);\r\n        console.log(this.lkey, this.intsLkey);\r\n    }\r\n\r\n    lengthenKey() {\r\n        let result = '', aux = 0;\r\n        this.cond.split('').map((it,ix) => {     \r\n            result += this.key[aux];\r\n            (aux == this.key.length-1) ? aux = 0 : aux++;  \r\n        });\r\n        return result;\r\n    }\r\n\r\n    encrypt() {\r\n        let res = this.intsCond.map((it,ix) => { // Mapeo el mensaje origen                    \r\n            return ((it + this.intsLkey[ix]) % 26);              // Aplico la función vigenere\r\n        });\r\n        return res;\r\n    }\r\n\r\n    decrypt()\r\n    {\r\n        var et = 0;\r\n        return this.intsCond.map((it,ix) => {                // mapeo mensaje cifrado y desenredo la función de vigenere\r\n            if((((it+26) - this.intsLkey[ix]) >= 26)) return ((it+26)%26 - this.intsLkey[ix]); \r\n            else                                      return ((it+26)    - this.intsLkey[ix]);                         \r\n        }); \r\n    }\r\n\r\n    intsInAlph(str) {\r\n        return str.split('').map((char) => {             // Mapeo el mensaje\r\n            if(char != ' ') return this.char2int(char); // Convierto a decimal caracter por caracter           \r\n        }).filter(function (el) { return el != null;});  // se retorna un array con los enteros \r\n    }\r\n\r\n    toMessage(msg)\r\n    {\r\n        return msg.map((int) => {        // mapeo el mensaje\r\n            return alph[int];            // Paso binario a entero y de entero a caracter \r\n        }).join('')                      // Concateno (elementos de array) para formar una cadena\r\n    }\r\n\r\n    char2int(char) \r\n    {\r\n        var num;\r\n        return alph.map((it, ix) => {\r\n            if(it === char) {\r\n                num = ix;\r\n                return num;\r\n            } \r\n        }).find(el => el === num); // reducción de array a entero \r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(this.toMessage(this.res));\r\n        $(`#res-bin`).html(bins.fromString(this.toMessage(this.res)).join(', '));\r\n        $(`#res-hex`).html(hexs.fromString(this.toMessage(this.res)).join(', '));\r\n        $(`#res-int`).html(ints.fromString(this.toMessage(this.res)).join(', '));\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class hello {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","import { ints, hexs, bins, str } from './utils/transforms';\r\n\r\nimport p1  from './alg/p1-vernam';\r\nimport p2  from './alg/p2-vigenere';\r\nimport p3  from './alg/p3-rc4';\r\nimport p4  from './alg/p4-a5-1';\r\nimport p5  from './alg/p5-gen-e0';\r\nimport p6  from './alg/p6-multi-snow3g-y-aes';\r\nimport p7  from './alg/p7-rijndael';\r\nimport p8  from './alg/p8-cbc';\r\nimport p9  from './alg/p9-diffle-hellman';\r\nimport p10 from './alg/p10-fiat-shamir';\r\nimport p11 from './alg/p11-rsa';\r\nimport p12 from './alg/p12-gamal-eliptico';\r\n\r\ndisable(1,1,1,1,1,1);\r\nvar objs = [ 0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12 ]\r\n\r\n// selectores\r\n\r\n\r\n// listeners\r\n$('#algoritmo').children().map(it => createEncrypt(objs[it],  $('#algoritmo').children()[it].innerHTML));\r\n$('#algoritmo').children().map(it => createDecrypt(objs[it],  $('#algoritmo').children()[it].innerHTML));\r\n\r\nif ($('#ej1').is(':checked')) {\r\n    $('#ej2').attr('disabled','disabled');\r\n} else {\r\n}\r\n\r\n// inicialización\r\n$('#algoritmo').change(() => {\r\n    switch($('#algoritmo option:selected').val()) {\r\n        case \"1\": \r\n            active(1,1,1,1,1,1);\r\n            disable(0,0,1,0,0,0);  \r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"1\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        $(`#plaintext`).html(\"SOL\");\r\n                        $(`#cipherkey`).html(str.fromBins([\"00111100\", \"00011000\", \"01110011\"]).join(''));\r\n                    } \r\n                    if($('#ej2').is(':checked')) {\r\n                        $(`#plaintext`).html(\"[t\");\r\n                        $(`#cipherkey`).html(str.fromBins([\"00001111\", \"00100001\"]).join(''));\r\n                    }     \r\n                }\r\n            }); \r\n\r\n            ; break;\r\n            \r\n        case \"2\": \r\n            active(1,1,1,1,1,1);\r\n            disable(0,0,0,0,0,0);  \r\n            $('#ej2').attr('disabled','disabled');\r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"2\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        $(`#plaintext`).html(\"ESTE MENSAJE SE AUTODESTRUIRA\");\r\n                        $(`#cipherkey`).html(\"MISION\");\r\n                    } \r\n                }\r\n            }); \r\n            ; break;\r\n\r\n        case \"3\": \r\n            ; break;\r\n\r\n        case \"4\":\r\n            ; break;\r\n\r\n        case \"5\":\r\n            ; break;\r\n\r\n        case \"6\":\r\n            ; break;\r\n\r\n        case \"7\":\r\n            ; break;\r\n\r\n        case \"8\":\r\n            ; break;\r\n\r\n        case \"9\":\r\n            ; break;\r\n\r\n        case \"10\":\r\n            ; break;\r\n\r\n        case \"11\":\r\n            ; break;\r\n\r\n        case \"12\":\r\n            ; break;\r\n\r\n        default:\r\n            $('#cipherkey').attr('disabled','disabled');\r\n            $('#plaintext').attr('disabled','disabled');\r\n            $('#encrypt').attr('disabled','disabled');\r\n            ; break;\r\n\r\n    }\r\n});\r\n\r\nfunction disable(formato, plaintext, key, enc, des, ej) {\r\n    if(formato)   $('#formato').attr('disabled','disabled');\r\n    if(plaintext) $('#plaintext').attr('disabled','disabled');\r\n    if(key)       $('#cipherkey').attr('disabled','disabled');\r\n    if(enc)       $('#encrypt').attr('disabled','disabled');\r\n    if(des)       $('#decrypt').attr('disabled','disabled');\r\n    if(ej)        $('.form-check-input').attr('disabled','disabled');\r\n}\r\n\r\n\r\nfunction active(formato, plaintext, key, enc, des, ej) {\r\n    if(formato)   $('#formato').removeAttr('disabled');\r\n    if(plaintext) $('#plaintext').removeAttr('disabled');\r\n    if(key)       $('#cipherkey').removeAttr('disabled');\r\n    if(enc)       $('#encrypt').removeAttr('disabled');\r\n    if(des)       $('#decrypt').removeAttr('disabled');\r\n    if(ej)        $('.form-check-input').removeAttr('disabled');\r\n}\r\n\r\nfunction createEncrypt(obj, tag) {\r\n    $(`#encrypt`).click(() => {\r\n        if($('#algoritmo option:selected').text() == tag) {\r\n            console.clear();\r\n            let tmp = new obj($('#formato option:selected').val(), $(\"#plaintext\").val(), $(\"#cipherkey\").val());\r\n            tmp.res = tmp.encrypt();\r\n            tmp.render();\r\n\r\n\r\n        }\r\n    });    \r\n}\r\n\r\nfunction createDecrypt(obj, tag) {\r\n    $(`#decrypt`).click(() => {\r\n        if($('#algoritmo option:selected').text() == tag) {\r\n            let tmp = new obj($('#formato option:selected').val(), $(\"#plaintext\").val(), $(\"#cipherkey\").val());\r\n            tmp.res = tmp.decrypt();\r\n            tmp.render();\r\n        }\r\n    });    \r\n}"]}