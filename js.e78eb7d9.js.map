{"version":3,"sources":["js/utils/transforms.js","js/alg/0-0-vernam.js","js/utils/alph-p2.json","js/alg/1-0-vigenere.js","js/alg/2-0-rc4.js","js/alg/2-1-a5-1.js","js/alg/3-0-chacha20.js","js/alg/4-0-gen-e0.js","js/alg/4-1-gen-ca-gps.js","js/alg/5-0-multi-snow3g-y-aes.js","js/alg/6-0-rijndael.js","js/utils/byte-multipliers.js","js/utils/rijndael.js","js/alg/7-0-cbc.js","js/alg/7-1-fiat-shamir.js","../node_modules/@f/srand/lib/index.js","js/utils/ModExpontentes.js","js/utils/diffie-Hellman.js","js/alg/8-0-elgamal.js","js/alg/9-0-rsa.js","js/utils/point.js","js/alg/10-0-diffle&hellman(elgamal el√≠ptico).js","js/alg/10-1-gamal-eliptico.js","js/index.js"],"names":["ints","fromString","msg","split","map","char","charCodeAt","fromHexs","arr_hex","Array","isArray","byte","parseInt","fromBins","arr_bin","hexs","fromInts","arr_int","mode","toString","length","Number","bins","repeat","str","i","String","fromCharCode","Vernam","format","plaintext","key","alert","intsMsg","generate_key","intskey","join","msgbin","res","console","log","it","ix","aux","Math","round","random","push","$","is","val","html","module","exports","alph","Vigenere","toUpperCase","cond","replace","intsCond","intsInAlph","lkey","lengthenKey","intsLkey","result","char2int","filter","el","int","num","find","toMessage","RC4","cipher_key","Plaintext","A5","ROUNDS","ChaCha20","clave","word","reverse","contador","prompt","nonce","S","concat","table","slice","salida","chachaBlock","a","b","x","j","k","l","c","d","ROTL","input","QR","GenE0","taps","GenCA","data","JSON","parse","c1","c2","sat","satelite","R1","R2","cs","longitud","LFSR","R","fb","cif","feed","pos","reduce","unshift","pop","Snow3G","AES","MainLog","factors","results","ByteMultiplier","algorithmByte","mainLog","subLog","multiply","byteA_","byteB_","decomposeByte","subMult","multiplyByFactor","byte_","toByteBits","forEach","bit","index","factor","fill","f","toByte","factor_","oneIndex","indexOf","factorLog","rotateLeft","resultLog","xorByteBits","operation","byteBitsA","byteBitsB","prototype","padStart","rightFeedBack","shift","Aes","byteMultiplier","Nb","numOfRounds","state","Sbox","RC","mixColumnMatrix","toMatrix","settedKey","transposeMatrix","matrix","transposedMatrix","_","colIndex","row","XORmultiplyMatrixByColumn","column","AddRoundKey","xor","ByteSub","ShiftRow","shifted","roundLeft","MixColumn","transposedState","array1","array2","expandKey","rcIndex","expandedKey","words","keyLastColumn","getSubkeys","subkeys","times","cipher","Flatkey","clearText","subkey","flat","Infinity","decrypt","swap","splice","CBC","iv","bloques","separarEnBloques","bloque","aes","cifrados","cypherStealing","apply","tmp","cifra","descifrados","nivel","prevc","bytesMinor","dif","sub","FiatShamir","alg","mod","n","m","remain","floor","remove","L","what","ax","arguments","expRapida","base","exp","y","euclidExt","min","max","z","trunc","modInverse","isNaN","NaN","s","choose","choices","lehmanPeralta","p","primo","enteros","keys","DyH","x_A","x_B","alfa","y_A","y_B","K1","DyH_G","elcomuns","secretos","K","A","B","C","encrypt","M","invK","inverso","stringify","alfabeto","RSA","dat","q","fin","e","check","tam","get_tam","codificacionNumerica","primos","pow","caracteres","letras_to_num","bloques_decimal","letra_num","cifrado_array","cifrado","substring","entero","range","chunk","ceil","Point","other","x3","y3","den","lambda","v","constructor","name","parejas","tupla","multi","sumar","DyH_GE","G","validarEntradas","puntos","calcularPuntos","buildPLot","CpB","keygen","dB","CpA","dA","CcA","CcB","Q","codificarMsg","cpa","db","ey","ex","py","px","sort","P","h","undefined","xA","yA","points","type","marker","color","line","width","symbol","size","xlA","ylA","sqrt","Plotly","newPlot","vstr","eliptica","punto","sum","mc","publicKey","GE","disable","objs","formato","enc","des","ej","attr","active","removeAttr","createEncrypt","obj","tag","click","text","clear","render","createDecrypt","children","innerHTML","change","show","hide"],"mappings":"AsBEK,AjBAA,AEAA,AEAA,ACAA,AIAA,aQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,SQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,EQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,EQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,GQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,KQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,aQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,GQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,MQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,IQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,UQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,qCQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,OQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,eQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,QQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,aQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,CQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,OQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,IQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,QQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,aQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,EQFgBqW,AjBAA1R,AEAA0B,AEAAuB,ACAAC,AIAAmG,IQAAqI,AjBAA1R,AEAA0B,AEAAuB,ACAAC,AIAAmG,EQCjB,AjBAA,AEAA,AEAA,ACAA,AIAA,SQAYvJ,AjBAAA,AEAAA,AEAAA,ACAAA,AIAAA,EQAAA,AjBAAA,AEAAA,AEAAA,ACAAA,AIAAA,EQAYC,AjBAAA,AEAAA,AEAAA,ACAAA,AIAAA,EQAWxD,AjBAAA,AEAAA,AEAAA,ACAAA,AIAAA,GQAM,AjBAA,AEAA,AEAA,ACAA,AIAA,EQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,KQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,IQCxC,AjBAA,AEAA,AEAA,ACAA,AIAA,QQAA,AjBAA,AEAA,AEAA,ACAA,AIAA,QQAA,AjBAA,AEAA,AEAA,ACAA,AIAA;AdkEL,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,QAAA,K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","file":"js.e78eb7d9.js","sourceRoot":"..\\src","sourcesContent":["var ints = {\r\n    fromString(msg) {\r\n        return msg.split('').map((char) => {\r\n            return char.charCodeAt(0);\r\n        });\r\n    },\r\n\r\n    fromHexs(arr_hex) {\r\n        if(!Array.isArray(arr_hex)) return parseInt(arr_hex,16);\r\n        else {\r\n            return arr_hex.map((byte) => {\r\n                if(typeof byte == 'string') return parseInt(byte,16);\r\n                else return byte;                \r\n            });\r\n        }\r\n    },\r\n\r\n    fromBins(arr_bin) {\r\n        if(!Array.isArray(arr_bin)) return parseInt(arr_bin,2);\r\n        else {\r\n            return arr_bin.map((byte) => {\r\n                return parseInt(byte,2);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nvar hexs = {\r\n    fromInts(arr_int, mode) {\r\n        if(!Array.isArray(arr_int)) {\r\n            if(mode == \"number\") {\r\n                if(arr_int.toString(16).length < 2) return Number(`0x0${arr_int.toString(16)}`);\r\n                else                                return Number(`0x${arr_int.toString(16)}`);\r\n            } else {\r\n                //console.log(\"entr√≥ aqu√≠\",arr_int,mode,`${arr_int.toString(16)}`);\r\n                if(arr_int.toString(16).length < 2) return (`0${arr_int.toString(16)}`);\r\n                else                                return (`${arr_int.toString(16)}`);\r\n            }\r\n            \r\n        } \r\n        else {\r\n            return arr_int.map((byte) => {\r\n                if(byte.toString(16).length < 2) return \"0\"+byte.toString(16);\r\n                else                             return byte.toString(16);\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    fromString(msg)   { return this.fromInts(ints.fromString(msg));   },\r\n    fromBins(arr_bin) { return this.fromInts(ints.fromBins(arr_bin)); }\r\n}\r\n\r\n\r\nvar bins = {\r\n    fromInts(arr_int) {\r\n        if(!Array.isArray(arr_int)) return \"0\".repeat(8 - arr_int.toString(2).length) + arr_int.toString(2);\r\n        else {\r\n            return arr_int.map((byte) => {\r\n                return \"0\".repeat(8 - byte.toString(2).length) + byte.toString(2);\r\n            });\r\n        } \r\n    },\r\n\r\n    fromString(msg)   { return this.fromInts(ints.fromString(msg));   },\r\n    fromHexs(arr_hex) { return this.fromInts(ints.fromHexs(arr_hex)); }\r\n}\r\n\r\nvar str  ={\r\n    fromInts(arr_int) {\r\n        if(!Array.isArray(arr_int)) return String.fromCharCode(arr_int);\r\n        else {\r\n            return arr_int.map((byte,i) => {\r\n                return String.fromCharCode(byte);\r\n            });\r\n        }     \r\n    },\r\n\r\n    fromHexs(arr_hex) { return this.fromInts(ints.fromHexs(arr_hex)); },\r\n    fromBins(arr_bin) { return this.fromInts(ints.fromBins(arr_bin)); }\r\n}\r\n\r\nexport { ints, hexs, bins, str }","import { ints, hexs, bins, str } from '../utils/transforms';\r\n\r\nexport default class Vernam { // vernam\r\n    constructor(format, plaintext, key) {\r\n        alert(\"Este algoritmo no se asegura de repetir la clave para cubrir todo el mensaje, aseg√∫rate de darle la misma dimensi√≥n.\");\r\n        if(format == \"srt\") {this.intsMsg = ints.fromString(plaintext)}\r\n        if(format == \"hex\") {this.intsMsg = ints.fromHexs(plaintext)}\r\n        if(format == \"int\") {}\r\n        if(format == \"bin\") {this.intsMsg = ints.fromBins(plaintext)}\r\n        \r\n\r\n        // gestion de los inputs\r\n        this.key = bins.fromString(key);\r\n        this.generate_key();\r\n        this.intskey = ints.fromString(str.fromBins(this.key).join(''));\r\n\r\n        this.msgbin = bins.fromString(plaintext);\r\n        this.res = ints.fromString(plaintext);\r\n\r\n        // mensajes consola\r\n        console.log(`\"${plaintext}\":`, this.msgbin.join(''), this.msgbin.join('').length);\r\n        console.log(`\"${str.fromBins(this.key).join('')}\":`, this.key.join(''), this.key.join('').length);\r\n    }\r\n\r\n    encrypt() {\r\n       return this.res.map((it,ix) => {\r\n        return it ^ this.intskey[ix];\r\n       }); \r\n    }\r\n\r\n    generate_key() {\r\n        let res = [], aux = '';\r\n        this.intsMsg.map((it,ix) => {\r\n            aux = '';\r\n            for(let i = 0; i < 8; i++) aux += Math.round(Math.random()).toString();\r\n            res.push(aux);\r\n        });\r\n        if($('#manual').is(':checked') && (!$(\"#cipherkey\").val())) {\r\n            this.key = res;\r\n            $(\"#cipherkey\").html(str.fromBins(this.key));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(str.fromInts(this.res));\r\n        $(`#res-bin`).html(bins.fromInts(this.res).join(', '));\r\n        $(`#res-hex`).html(hexs.fromInts(this.res).join(', '));\r\n        $(`#res-int`).html(this.res.join(', '));\r\n    }\r\n}","module.exports={alph:[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]};","import { ints, hexs, bins, str } from '../utils/transforms';\r\nimport { alph } from '../utils/alph-p2.json';\r\n\r\nexport default class Vigenere {\r\n    constructor(format, plaintext, key) {\r\n        alert(\"Importante: Este algoritmo ignora los espacios\");\r\n        this.msg = plaintext.toUpperCase();\r\n        this.cond = this.msg.replace(/\\s/g, '');\r\n        this.intsCond = this.intsInAlph(this.cond);\r\n\r\n        // claves \r\n        this.key = key.toUpperCase();\r\n        this.lkey = this.lengthenKey();\r\n        this.intsLkey = this.intsInAlph(this.lkey);\r\n\r\n        console.log(this.cond, this.intsCond);\r\n        console.log(this.lkey, this.intsLkey);\r\n    }\r\n\r\n    lengthenKey() {\r\n        let result = '', aux = 0;\r\n        this.cond.split('').map((it,ix) => {     \r\n            result += this.key[aux];\r\n            (aux == this.key.length-1) ? aux = 0 : aux++;  \r\n        });\r\n        return result;\r\n    }\r\n\r\n    encrypt() {\r\n        let res = this.intsCond.map((it,ix) => { // Mapeo el mensaje origen                    \r\n            return ((it + this.intsLkey[ix]) % 26);              // Aplico la funci√≥n vigenere\r\n        });\r\n        return res;\r\n    }\r\n\r\n    decrypt()\r\n    {\r\n        var et = 0;\r\n        return this.intsCond.map((it,ix) => {                // mapeo mensaje cifrado y desenredo la funci√≥n de vigenere\r\n            if((((it+26) - this.intsLkey[ix]) >= 26)) return ((it+26)%26 - this.intsLkey[ix]); \r\n            else                                      return ((it+26)    - this.intsLkey[ix]);                         \r\n        }); \r\n    }\r\n\r\n    intsInAlph(str) {\r\n        return str.split('').map((char) => {             // Mapeo el mensaje\r\n            if(char != ' ') return this.char2int(char); // Convierto a decimal caracter por caracter           \r\n        }).filter(function (el) { return el != null;});  // se retorna un array con los enteros \r\n    }\r\n\r\n    toMessage(msg)\r\n    {\r\n        return msg.map((int) => {        // mapeo el mensaje\r\n            return alph[int];            // Paso binario a entero y de entero a caracter \r\n        }).join('')                      // Concateno (elementos de array) para formar una cadena\r\n    }\r\n\r\n    char2int(char) \r\n    {\r\n        var num;\r\n        return alph.map((it, ix) => {\r\n            if(it === char) {\r\n                num = ix;\r\n                return num;\r\n            } \r\n        }).find(el => el === num); // reducci√≥n de array a entero \r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(this.toMessage(this.res));\r\n        $(`#res-bin`).html(bins.fromString(this.toMessage(this.res)).join(', '));\r\n        $(`#res-hex`).html(hexs.fromString(this.toMessage(this.res)).join(', '));\r\n        $(`#res-int`).html(ints.fromString(this.toMessage(this.res)).join(', '));\r\n    }\r\n}","export default class RC4 {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class A5 {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","import { ints, hexs } from '../utils/transforms';\r\nconst ROUNDS = 20;\r\n\r\nexport default class ChaCha20 {\r\n    constructor(format, Plaintext, key) {\r\n        \r\n        this.clave = ints.fromHexs(key.split(\": \").map(word => word.split(\":\").reverse().join(\"\"))); \r\n        this.contador = ints.fromHexs(prompt(\"Contador\", \"01:00:00:00\").split(\": \").map(word => word.split(\":\").reverse().join(\"\")));\r\n        this.nonce = ints.fromHexs(prompt(\"Nonce\", \"00:00:00:09: 00:00:00:4a: 00:00:00:00\").split(\": \").map(word => word.split(\":\").reverse().join(\"\")));\r\n        //this.contador = ints.fromHexs((\"01:00:00:00\").split(\": \").map(word => word.split(\":\").reverse().join(\"\")));\r\n        //this.nonce = ints.fromHexs((\"00:00:00:09: 00:00:00:4a: 00:00:00:00\").split(\": \").map(word => word.split(\":\").reverse().join(\"\")));\r\n\r\n        console.log(\"clave:\", this.clave);       // [[4],[4],[4],[4],[4],[4],[4],[4]]\r\n        console.log(\"contador:\", this.contador); // [[4]]\r\n        console.log(\"nonce:\", this.nonce);       // [[4],[4],[4]]\r\n        \r\n        \r\n        // Estado inicial\r\n        var S = [ 0x61707865, 0x3320646e, 0x79622d32, 0x6b206574 ]\r\n        .concat(this.clave)    // S[4..11]  = K (clave)\r\n        .concat(this.contador) // S[12]     = i (contador)\r\n        .concat(this.nonce)    // S[13..15] = N (nonce)\r\n        \r\n        console.log(\"ESTADO INICIAL: \");\r\n        console.table([\r\n            hexs.fromInts(S.slice(0,4)),\r\n            hexs.fromInts(S.slice(4,8)),\r\n            hexs.fromInts(S.slice(8,12)),\r\n            hexs.fromInts(S.slice(12,16))\r\n        ]);\r\n\r\n        var salida = this.chachaBlock(S);\r\n\r\n        console.log(\"SALIDA DEL GENERADOR: \");\r\n        console.table([\r\n            hexs.fromInts(salida.slice(0,4)),\r\n            hexs.fromInts(salida.slice(4,8)),\r\n            hexs.fromInts(salida.slice(8,12)),\r\n            hexs.fromInts(salida.slice(12,16))\r\n        ]);\r\n    }\r\n\r\n    ROTL(a,b) {\r\n        return (((a << b)) | (a >>> (32-b)));\r\n    }\r\n\r\n    QR(x,i,j,k,l) {\r\n        var a = x[i], b = x[j], c = x[k], d = x[l];\r\n        a+=b; d^=a; d=this.ROTL(d,16);\r\n        c+=d; b^=c; b=this.ROTL(b,12);\r\n        a+=b; d^=a; d=this.ROTL(d,8);\r\n        c+=d; b^=c; b=this.ROTL(b,7);\r\n        x[i]=a>>>0; x[j]=b>>>0; x[k]=c>>>0; x[l]=d>>>0;\r\n    }\r\n\r\n    chachaBlock(input) { // [16]\r\n        var x = new Array(16);  // palabras\r\n        input.map((word,i) => {x[i] = word});\r\n        \r\n        for(var i = 0; i < ROUNDS; i+=2) {\r\n            // Ronda impar\r\n            this.QR(x, 0, 4,  8, 12); // column 0\r\n            this.QR(x, 1, 5,  9, 13); // column 1\r\n            this.QR(x, 2, 6, 10, 14); // column 2\r\n            this.QR(x, 3, 7, 11, 15); // column 3\r\n            // Ronda par\r\n            this.QR(x, 0, 5, 10, 15); // diagon 1\r\n            this.QR(x, 1, 6, 11, 12); // diagon 2\r\n            this.QR(x, 2, 7,  8, 13); // diagon 3\r\n            this.QR(x, 3, 4,  9, 14); // diagon 4\r\n        }\r\n        \r\n        console.log(\"TRAS LAS 20 ITERACIONES: \");\r\n        console.table([\r\n            hexs.fromInts(x.slice(0,4)),\r\n            hexs.fromInts(x.slice(4,8)),\r\n            hexs.fromInts(x.slice(8,12)),\r\n            hexs.fromInts(x.slice(12,16))\r\n        ]);\r\n\r\n        return x.map((word,i) => {\r\n            return word+input[i];\r\n        });\r\n    }\r\n\r\n    encrypt() {\r\n        return [];\r\n    }\r\n\r\n    decrypt() {\r\n        return [];\r\n    }\r\n\r\n    render() {\r\n\r\n    }\r\n}","export default class GenE0 {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","var taps = [\r\n    /* 1*/[1,5], /* 2*/[2,6],  /* 3*/[3,7],  /* 4*/[4,8], \r\n    /* 5*/[0,8], /* 6*/[1,9],  /* 7*/[0,7],  /* 8*/[1,8], \r\n    /* 9*/[2,9], /*10*/[1,2],  /*11*/[2,3],  /*12*/[4,5], \r\n    /*13*/[5,6], /*14*/[6,7],  /*15*/[7,8],  /*16*/[8,9], \r\n    /*17*/[0,3], /*18*/[1,4],  /*19*/[2,5],  /*20*/[3,6], \r\n    /*21*/[4,7], /*22*/[5,8],  /*23*/[0,2],  /*24*/[3,5], \r\n    /*25*/[4,6], /*26*/[5,7],  /*27*/[6,8],  /*28*/[7,9], \r\n    /*29*/[0,5], /*30*/[1,6],  /*31*/[2,7],  /*32*/[3,8], \r\n];\r\n\r\nexport default class GenCA {\r\n    constructor(format, plaintext, data) {\r\n        var data = JSON.parse(data);\r\n        var sat = taps[data.satelite-1];  // sat√©lite para LFSR2 \r\n        \r\n        var R1 = [1,1,1,1,1,1,1,1,1,1];\r\n        var R2 = [1,1,1,1,1,1,1,1,1,1];\r\n\r\n        var cs = [], c1, c2;\r\n        for(let i=0; i<data.longitud; ++i) {\r\n            if(i == 0) console.log(R1.join(\"\"),R2.join(\"\"));\r\n            \r\n            // realimentaci√≥n\r\n            c1 = this.LFSR(R1, [2,9],         9);\r\n            c2 = this.LFSR(R2, [1,2,5,7,8,9], sat);\r\n            \r\n            // bit de secuencia cifrante\r\n            cs.push(c1^c2); \r\n            console.log(R1.join(\"\"),R2.join(\"\"), cs[i]);\r\n            \r\n            \r\n        }\r\n        console.log(\"C/A code:\", cs.reverse().join(\"\"));\r\n    }\r\n\r\n    LFSR(R,fb,cif) { // [1^1^1..]\r\n        let feed = fb.map(pos => R[pos]).reduce((a,b) => (a^b), 0);\r\n        let c;\r\n\r\n        // bits pre xor [R[1]^R[5]]\r\n        if(Array.isArray(cif)) c = cif.map(pos => R[pos]).reduce((a,b) => (a^b), 0);\r\n        else                   c = R[R.length-1];\r\n        \r\n        // realimentaci√≥n\r\n        R.unshift(feed); R.pop(); \r\n        \r\n        return c;\r\n    }\r\n\r\n    encrypt() {\r\n        return [];\r\n    }\r\n\r\n    decrypt() {\r\n        return [];\r\n    }\r\n\r\n    render() {\r\n\r\n    }\r\n}","export default class Snow3G {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","export default class AES {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","\r\nexport const MainLog = function() {\r\n  this.factors = [];\r\n  this.results = [];\r\n};\r\n\r\n\r\nexport const ByteMultiplier = function(algorithmByte) {\r\n  this.algorithmByte = algorithmByte;\r\n  this.mainLog = new MainLog();\r\n  this.subLog = [];\r\n  \r\n\r\n  /**\r\n   * Performs byte multiplication using algorithmByte\r\n   * @param {number} byteA_ \r\n   * @param {number} byteB_ \r\n   * @return {number} multiplication of two bytes\r\n   */\r\n  this.multiply = function(byteA_, byteB_) {\r\n    \r\n    // Logging\r\n    this.mainLog = new MainLog();\r\n    this.subLog = [];\r\n\r\n    // Decomposing into factors\r\n    const factors = this.decomposeByte(byteB_);\r\n\r\n    // Logging\r\n    this.mainLog.factors = [...factors];\r\n\r\n    // Calculating product\r\n    let result = 0;\r\n    for (let i = 0; i < factors.length; i++) {\r\n      const subMult = this.multiplyByFactor(byteA_, factors[i]);\r\n      this.mainLog.results.push(subMult);\r\n      result ^= subMult;\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Decompose a byte into it's factors\r\n   * @param {number} byte_ \r\n   * @return {Array<number>}\r\n   */\r\n  this.decomposeByte = function(byte_) {\r\n    const factors = [];\r\n    byte_.toByteBits().forEach((bit, index) => {\r\n      if (bit === 1) {\r\n        const factor = new Array(8).fill(0);\r\n        factor[index] = 1;\r\n        factors.unshift(factor);\r\n      }\r\n    });\r\n    return factors.map((f) => f.toByte());\r\n  };\r\n\r\n  /**\r\n   * Performs a multiplication between byte_ and factor_. \r\n   * @param {number} byte_ \r\n   * @param {number} factor_ A byte with only one 1.\r\n   * @return {number}\r\n   */\r\n  this.multiplyByFactor = function(byte_, factor_) {\r\n    if (factor_ === 1) {\r\n      return byte_;\r\n    }\r\n\r\n    let byte = byte_.toByteBits();\r\n    const factor = factor_.toByteBits();\r\n\r\n    const oneIndex = 7 - factor.indexOf(1);\r\n\r\n    // Logging\r\n    const factorLog = [byte_.toByteBits().join('')];\r\n\r\n    for (let i = 0; i < oneIndex; i++) {\r\n      if (byte[0] === 1) {\r\n        byte.rotateLeft();\r\n\r\n        // Logging\r\n        let resultLog = `${byte.join('')} + ${algorithmByte.toByteBits().join('')} = `;\r\n\r\n\r\n        byte = this.xorByteBits(byte, algorithmByte.toByteBits());\r\n\r\n        resultLog += `${byte.join('')}`;\r\n\r\n        // Logging\r\n        factorLog.push({operation: 'rotate & add', result: resultLog});\r\n      } else {\r\n        byte.rotateLeft();\r\n\r\n        // Logging\r\n        factorLog.push({operation: 'rotate', result: byte.join('')});\r\n      }\r\n    }\r\n\r\n    // Logging\r\n    this.subLog.push(factorLog);\r\n\r\n    return byte.toByte();\r\n  };\r\n\r\n  /**\r\n   * Performs a xor operation bettween two Arrays<1 | 0> of length 8 and returns the result\r\n   * @param {Array<1|0>} byteBitsA \r\n   * @param {Array<1|0>} byteBitsB \r\n   * @return {Array<1|0>} Result of xor operation between byteBitsA and byteBitsB\r\n   */\r\n  this.xorByteBits = function(byteBitsA, byteBitsB) {\r\n    const byteA = parseInt(byteBitsA.join(''), 2);\r\n    const byteB = parseInt(byteBitsB.join(''), 2);\r\n\r\n    return (byteA ^ byteB).toByteBits();\r\n  };\r\n\r\n  /**\r\n   * Converts the less significant byte of a number into \r\n   * an array of length 8 containning it's bits.\r\n   * @return {Array<1 | 0>} 0's and 1's array of length 8.\r\n   */\r\n  Number.prototype.toByteBits = function() {\r\n    const result = this & 0xff;\r\n    return result.toString(2).padStart(8, '0').split('').map((b) => parseInt(b));\r\n  };\r\n\r\n  /**\r\n   * Converts an array of length 8 containning 1's and 0's to a byte.\r\n   * @return {number}\r\n   */\r\n  Array.prototype.toByte = function () {\r\n    return parseInt(this.join(''), 2);\r\n  };\r\n\r\n\r\n  /**\r\n   * Rotates the invocant array to left using rightFeedBack\r\n   * @param {1 | 0} rightFeedBack \r\n   */\r\n  Array.prototype.rotateLeft = function(rightFeedBack = 0) {\r\n    this.shift();\r\n    this.push(rightFeedBack);\r\n  };\r\n\r\n};","import { ByteMultiplier } from './byte-multipliers.js';\r\n\r\nexport const Aes = function () {\r\n  /***********************************************************************************/\r\n  // Constantes\r\n  this.byteMultiplier = new ByteMultiplier(0x1b); // Multiplicador de bytes\r\n  this.Nb = 4; // N√∫mero de columnas\r\n  this.numOfRounds = 10; // N√∫mero de rondas\r\n  this.state = []; // Estado (intermedio)\r\n\r\n  // Caja S\r\n  this.Sbox = [\r\n    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\r\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\r\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\r\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\r\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\r\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\r\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\r\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\r\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\r\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\r\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\r\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\r\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\r\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\r\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\r\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,\r\n  ];\r\n\r\n  // Constantes de iteraci√≥n\r\n  this.RC = [\r\n    [0x01, 0x00, 0x00, 0x00],\r\n    [0x02, 0x00, 0x00, 0x00],\r\n    [0x04, 0x00, 0x00, 0x00],\r\n    [0x08, 0x00, 0x00, 0x00],\r\n    [0x10, 0x00, 0x00, 0x00],\r\n    [0x20, 0x00, 0x00, 0x00],\r\n    [0x40, 0x00, 0x00, 0x00],\r\n    [0x80, 0x00, 0x00, 0x00],\r\n    [0x1B, 0x00, 0x00, 0x00],\r\n    [0x36, 0x00, 0x00, 0x00],\r\n  ]\r\n\r\n  // Matriz para multiplicaci√≥n en MixColumn\r\n  this.mixColumnMatrix = [\r\n    [0x02, 0x03, 0x01, 0x01],\r\n    [0x01, 0x02, 0x03, 0x01],\r\n    [0x01, 0x01, 0x02, 0x03],\r\n    [0x03, 0x01, 0x01, 0x02],\r\n  ];\r\n\r\n  /***********************************************************************************/\r\n  // Objetos para loggear la informaci√≥n en la p√°gina\r\n  this.log = [];\r\n  \r\n\r\n  /***********************************************************************************/\r\n  // M√©todos\r\n  /**\r\n   * Receives a Number[] representing the initial text\r\n   * @param {Number[]} key \r\n   * @returns A Number[][] square matrix. For example:\r\n   * Input: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\r\n   * Output: [\r\n   *           [0,   1,  2,  3], \r\n   *           [4,   5,  6,  7],\r\n   *           [8,   9, 10, 11],\r\n   *           [12, 12, 14, 15],\r\n   *         ]\r\n   */\r\n  this.toMatrix = function (key) {\r\n    // Creates a copy of key\r\n    let settedKey = [];\r\n    for (let i = 0, k = 0; i < 4; i++) {\r\n      settedKey.push([]);\r\n      for (let j = 0; j < this.Nb; j++) {\r\n        settedKey[i].push(key[k++])\r\n      }\r\n    }\r\n    \r\n    return settedKey;\r\n  }\r\n\r\n  /**\r\n   * Recibe una matriz y devuelve su traspuesta.\r\n   * @param  matrix \r\n   */\r\n  this.transposeMatrix = function (matrix) {\r\n    let transposedMatrix = matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));\r\n    return transposedMatrix;\r\n  }\r\n\r\n  /**\r\n   * Multiplica una matriz por una columna y devuelve el resultado\r\n   */\r\n  this.XORmultiplyMatrixByColumn = function(matrix, column) {\r\n    const result = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      result.push([]);\r\n      for (let j = 0; j < this.Nb; j++) {\r\n        result[i].push(this.byteMultiplier.multiply(matrix[i][j], column[j]));\r\n      }\r\n    }\r\n    return result.map(row => row.reduce((result, val) => result ^ val));\r\n  }\r\n\r\n  /**\r\n   * Retorna el resultado de aplicar la operaci√≥n AddRoundKey entre dos matrices (xor)\r\n   */\r\n  this.AddRoundKey = function (state, key) {\r\n    return state.map((row, i) => this.xor(row, key[i]));\r\n  };\r\n\r\n  /**\r\n   * Realiza la sustituci√≥n de un byte con la caja S\r\n   * @param  byte \r\n   * @returns \r\n   */\r\n  this.ByteSub = function (byte) {\r\n    return this.Sbox[byte];\r\n  }\r\n\r\n  /**\r\n   * Aplica la operaci√≥n ShiftRow descrita en las especificaciones del AES\r\n   * Fila 0: 0 rotaciones, Fila 1: 1 rotaci√≥n, etc...\r\n   */\r\n  this.ShiftRow = function (key) {\r\n    const shifted = key.map(row => [...row]);\r\n    for (let i = 0; i < this.Nb; i++) {\r\n      shifted[i].roundLeft(i);\r\n    }\r\n\r\n    return shifted;\r\n  }\r\n\r\n  /**\r\n   * Retorna el resultado de aplicar la operaci√≥n MixColumn\r\n   * a la matris state\r\n   */\r\n  this.MixColumn = function (state) {\r\n    const result = []; \r\n    const transposedState = this.transposeMatrix(state);\r\n    for (let i = 0; i < this.mixColumnMatrix.length; i++) {     \r\n         result.push(this.XORmultiplyMatrixByColumn(this.mixColumnMatrix, transposedState[i]))\r\n    }\r\n\r\n    return this.transposeMatrix(result);\r\n  }\r\n\r\n  /**\r\n   * Recibe dos vectores de igual longitud y retorna el resultado de aplicar la operaci√≥n xor\r\n   * elemento a elemento.\r\n   */\r\n  this.xor = function(array1, array2) {\r\n    return array1.map((byte, index) => byte ^ array2[index]);\r\n  }\r\n\r\n  /**\r\n   * Obtiene una subclave a partir otra\r\n   * @param key Matriz de 4 x 4 bytes\r\n   * @param rcIndex √Øndice de la constante\r\n   * @returns subKey Matriz de 4 x 4 bytes\r\n   */\r\n  this.expandKey = function (key, rcIndex) {\r\n\r\n    let expandedKey = [];\r\n    let words = this.transposeMatrix(key);\r\n    const keyLastColumn = [...words[words.length - 1]];\r\n\r\n    words[words.length - 1].roundLeft();\r\n    words[words.length - 1] = words[key.length - 1].map(byte => this.ByteSub(byte));\r\n    \r\n\r\n    expandedKey.push(this.xor(this.xor(words[0], words[words.length - 1]), this.RC[rcIndex]));\r\n    words[words.length - 1] = keyLastColumn;\r\n\r\n    for (let i = 1; i < 4; i++) {\r\n      expandedKey.push(this.xor(words[i], expandedKey[i - 1]));\r\n    }\r\n\r\n    return this.transposeMatrix(expandedKey);\r\n  }\r\n\r\n  /**\r\n   * Devuelve 10 subclaves obtenidas a partir de la clave original\r\n   * @param  key \r\n   * @returns \r\n   */\r\n  this.getSubkeys = function(key) {\r\n    const subkeys = [[...key]];\r\n    for (let i = 0; i < this.numOfRounds; i++) {\r\n      subkeys.push(this.expandKey(subkeys[i], i));\r\n    }\r\n    return subkeys;\r\n  }\r\n\r\n  Array.prototype.roundLeft = function (times = 1) {\r\n    for (let i = 0; i < times; i++) this.push(this.shift());\r\n  }\r\n\r\n  /**\r\n   * Cifra un bloque de texto de 16 elementos\r\n   * @param {number[]} key 128 bits\r\n   * @param {number[]} clearText \r\n   */\r\n  this.cipher = function (Flatkey, clearText) {\r\n    console.log(\"ClearText\", clearText);\r\n    const key = this.transposeMatrix(this.toMatrix(Flatkey)); // Pasamos la entrada a matriz y luego obtenemos la transpuesta\r\n    const subkeys = this.getSubkeys(key); // C√°lculo de subclaves\r\n\r\n    // Ronda inicial\r\n    this.state = this.AddRoundKey(key, this.transposeMatrix(this.toMatrix(clearText)));\r\n    console.log(\"AddRoundKey1:\", this.state);\r\n    \r\n    // Logging\r\n    this.log = [];\r\n    this.log.push({subkey: subkeys[0], state: this.state});\r\n\r\n    //Ronda est√°ndar\r\n    for (let i = 1; i < this.numOfRounds; i++) {\r\n      console.log(\"aftersub\", this.state);\r\n      this.state = this.state.map(row => row.map(byte => this.ByteSub(byte))); // ByteSub\r\n      console.log(\"subBytes\", this.state);\r\n      this.state = this.ShiftRow(this.state); // ShiftRow\r\n      console.log(\"shiftRows\", this.state);\r\n      this.state = this.MixColumn(this.state); // MixColumn\r\n      console.log(\"MixColumn\", this.state);\r\n      this.state = this.AddRoundKey(this.state, subkeys[i]); // AddRound key\r\n      console.log(\"AddRoundKey2:\", this.state);\r\n      this.log.push({subkey: subkeys[i], state: this.state}); // Logging\r\n    }\r\n\r\n    //Ronda final\r\n    this.state = this.state.map(row => row.map(byte => this.ByteSub(byte))); // ByteSub\r\n    this.state = this.ShiftRow(this.state); //ShiftRow\r\n    this.state = this.AddRoundKey(this.state, subkeys[subkeys.length - 1]); //AddRoundKey\r\n    this.log.push({subkey: subkeys[10], state: this.state}); // Logging\r\n\r\n    return this.transposeMatrix(this.state).flat(Infinity);\r\n  };\r\n\r\n  /**\r\n   * Cifra un bloque de texto de 16 elementos\r\n   * @param {number[]} key 128 bits\r\n   * @param {number[]} clearText \r\n   */\r\n  this.decrypt = function (Flatkey, clearText) {\r\n    const key = this.transposeMatrix(this.toMatrix(Flatkey));\r\n    const subkeys = this.getSubkeys(key);\r\n    this.state = this.AddRoundKey(key, this.transposeMatrix(this.toMatrix(clearText)));\r\n\r\n    // Logging\r\n    this.log = [];\r\n    this.log.push({subkey: subkeys[0], state: this.state});\r\n\r\n    //Ronda inicial\r\n    this.state = this.AddRoundKey(this.state, subkeys[subkeys.length - 1]); //AddRoundKey\r\n    this.state = this.ShiftRow(this.state); //ShiftRow\r\n    this.state = this.state.map(row => row.map(byte => this.ByteSub(byte))); // ByteSub\r\n    this.log.push({subkey: subkeys[10], state: this.state}); // Logging\r\n\r\n    //Ronda est√°ndar\r\n    for (let i = 1; i < this.numOfRounds; i++) {\r\n        this.state = this.AddRoundKey(this.state, subkeys[i]); // AddRound key\r\n        this.state = this.MixColumn(this.state); // MixColumn\r\n        this.state = this.ShiftRow(this.state); // ShiftRow\r\n        this.state = this.state.map(row => row.map(byte => this.ByteSub(byte))); // ByteSub\r\n        this.log.push({subkey: subkeys[i], state: this.state}); // Logging\r\n    }\r\n\r\n    return this.transposeMatrix(this.state).flat(Infinity);\r\n  }\r\n\r\n\r\n};\r\n\r\n","import { ints, hexs, bins, str } from '../utils/transforms';\r\nimport { Aes } from '../utils/rijndael';\r\n\r\nArray.prototype.swap = function(a, b){\r\n    this[a] = this.splice(b, 1, this[a])[0];\r\n    return this;\r\n}\r\n\r\nexport default class CBC {\r\n    constructor(format, plaintext, key) { // str,str,str\r\n        // array de bloques(arrays) - HEXS\r\n        if(format == \"srt\") {\r\n            this.iv = prompt(\"Introduce el IV\", \"AAAAAAAAAAAAAAAA\");\r\n            this.intsMsg = ints.fromString(plaintext);\r\n            this.key     = ints.fromString(key);               \r\n            this.iv      = ints.fromString(this.iv);   \r\n        }\r\n        if(format == \"hex\") {\r\n            this.iv = prompt(\"Introduce el IV\", \"00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00\");\r\n            this.intsMsg = ints.fromHexs(plaintext.split(','));\r\n            this.key     = ints.fromHexs(key.split(','));               \r\n            this.iv      = ints.fromHexs(this.iv.split(','));           \r\n        }\r\n        if(format == \"bin\") {\r\n            this.iv = prompt(\"Introduce el IV\", \"000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,000000,\");\r\n            this.intsMsg = ints.fromBins(plaintext.split(','));\r\n            this.key     = ints.fromBins(key.split(','));               \r\n            this.iv      = ints.fromBins(this.iv.split(','));\r\n        }\r\n        this.bloques = this.separarEnBloques(plaintext); \r\n        console.log(`bloques separados: `,this.bloques);\r\n        \r\n        // mostrar los valores iniciales\r\n        console.log(\"Clave\", this.key);\r\n        console.log(\"IV\", this.iv);\r\n        this.bloques.map((bloque,i) => {console.log(`Plaintext B${i}`, bloque);});\r\n        \r\n        // resultado final\r\n        this.res = ints.fromHexs(plaintext);\r\n    }\r\n\r\n    encrypt() {\r\n        const aes = new Aes();\r\n        var xor = [];\r\n        var cifrados = [];\r\n        var key = this.key;\r\n    \r\n        this.bloques.map((bloque,i) => {\r\n            xor = [];\r\n            if(i == 0) {\r\n                xor = ints.fromHexs(bloque).map((byte,j) => { return (byte ^ this.iv[j]); }); \r\n                console.log(\"xor:\", xor);\r\n                cifrados.push(aes.cipher(key,xor));  // agregar bloque cifrado AES\r\n            } else {\r\n                if (bloque.length == 16) {\r\n                    xor = ints.fromHexs(bloque).map((byte,j) => { return (byte ^ cifrados[i-1][j]); }); \r\n                    cifrados.push(aes.cipher(key,xor));  // agregar bloque cifrado AES\r\n                } else {\r\n                    var cs = this.cypherStealing(i,cifrados[i-1]);\r\n                    xor = ints.fromHexs(cs).map((byte,j) => { return (byte ^ cifrados[i-1][j]); }); \r\n                    cifrados.push(aes.cipher(key,xor));\r\n                    cifrados.swap(i,i-1);\r\n                } \r\n                \r\n            }\r\n                       \r\n        });\r\n\r\n        console.log(cifrados);\r\n        return [].concat.apply([], cifrados);\r\n    }\r\n\r\n    separarEnBloques(plaintext) { // separar en bloques de 16 bytes\r\n        var tmp = [];\r\n        var result = [];\r\n        this.intsMsg.map((byte,i) => { // se mapea la cadena completa\r\n            tmp.push(byte); // recarco array temporal de 16 de longitud\r\n            if(i%16 == 15 || (i+1) == this.intsMsg.length) { // al llegar a mod16 o al final inserto eslab√≥n \r\n                result.push(tmp);\r\n                tmp = [];\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    decrypt() {\r\n        const aes = new Aes();\r\n        var key = this.key;\r\n        var cifra, xor, descifrados = [];\r\n        this.bloques.map((bloque,i) => {\r\n            cifra = (i == 0)? this.iv : this.bloques[i-1];\r\n            xor = cifra.map(byte => { return (byte ^ aes.decrypt(key,cifra));});\r\n            descifrados.push(xor);\r\n        });\r\n\r\n        return [].concat.apply([], descifrados);\r\n    }\r\n\r\n    cypherStealing(nivel,prevc) {\r\n        //console.log(hexs.fromInts(this.bloques[nivel]),hexs.fromInts(prevc))\r\n        \r\n        var bytesMinor = this.bloques[nivel].length; // byte del bloque peque√±o\r\n        var bytesMayor = prevc.length;               // bytes del cifrado anterior\r\n        var dif = bytesMayor - bytesMinor;           // diferencia\r\n\r\n        var sub = prevc.slice(bytesMinor,bytesMinor+dif); // extraer el sub array extra del cifrado anterior\r\n        for(var i = 0; i < dif; i++) prevc.pop();         // eliminar esos elementos del cifrado anterior\r\n        \r\n        return [].concat.apply(this.bloques[nivel], sub);        \r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(str.fromInts(this.res));\r\n        $(`#res-bin`).html(bins.fromInts(this.res).join(', '));\r\n        $(`#res-hex`).html(hexs.fromInts(this.res).join(', '));\r\n        $(`#res-int`).html(this.res.join(', '));\r\n    }\r\n}\r\n\r\n","export default class FiatShamir {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","/**\n * Expose srand\n */\n\nmodule.exports = srand\n\n/**\n * srand\n */\n\nfunction srand (seed) {\n  // If we're passed a string, condense it down\n  // into a number\n  if (typeof seed === 'string') {\n    str = seed\n    seed = 0xFF\n    for (var i = 0; i < str.length; i++) {\n      seed ^= str.charCodeAt(i)\n    }\n  }\n\n  return function (max, min) {\n    max = max || 1\n    min = min || 0\n    seed = (seed * 9301 + 49297) % 233280\n\n    return min + (seed / 233280) * (max - min)\n  }\n}\n","import srand from '@f/srand';\r\n\r\nvar mod = function (n, m) {\r\n    var remain = n%m;\r\n    while(remain < 0) remain = remain+m;\r\n    return Math.floor(remain%m);\r\n};\r\n\r\nArray.prototype.remove = function() {\r\n    var what, a = arguments, L = a.length, ax;\r\n    while (L && this.length) {\r\n        what = a[--L];\r\n        while ((ax = this.indexOf(what)) !== -1) {\r\n            this.splice(ax, 1);\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\nvar alg = {\r\n    expRapida(base,exp,m) {\r\n        var x = 1;\r\n        var y = base % m;\r\n        while(exp > 0 && y > 1) {\r\n            if(exp&1) { // impar\r\n                x = (x*y) % m;\r\n                exp -= 1;\r\n            } else {   // par\r\n                y = (y*y) % m;\r\n                exp /= 2\r\n            }\r\n        }\r\n        return x;\r\n    },\r\n    \r\n    euclidExt(a,b) { \r\n        if(Math.min(a,b) == 0) return {\"inverso\":1, \"mcd\":0};\r\n        let x = [null, Math.max(a,b), Math.min(a,b)]; \r\n        let z = [0, 1]; \r\n\r\n        for(var i = 2; (x[i-1]%x[i]) != 0; i++) {\r\n            x.push(x[i-1]%x[i]); \r\n            z.push(mod((-Math.trunc(x[i-1]/x[i]) * z[i-1] + z[i-2]), x[1])); \r\n            if(i > 1000) break;\r\n        }    \r\n\r\n        console.log(z,x);\r\n        return {\"inverso\":z[z.length-2], \"mcd\":x[x.length-1]};\r\n    },\r\n\r\n    modInverse(a, m) {\r\n        // validate inputs\r\n        [a, m] = [Number(a), Number(m)]\r\n        if (Number.isNaN(a) || Number.isNaN(m)) return NaN // invalid input\r\n        a = (a%m + m)%m\r\n        if (!a || m < 2) return NaN // invalid input\r\n        // find the gcd\r\n        const s = []\r\n        let b = m\r\n        while(b) {\r\n            [a, b] = [b, a%b]\r\n            s.push({a, b})\r\n        }\r\n        if (a !== 1) return NaN // inverse does not exists\r\n        \r\n        // find the inverse\r\n        let x = 1, y = 0\r\n        for(let i = s.length-2; i >= 0; --i) {\r\n            [x, y] = [y,  x - y * Math.floor(s[i].a/s[i].b)]\r\n        }\r\n        return (y%m + m)%m\r\n    },\r\n\r\n    choose(choices) {\r\n        var index = Math.floor(Math.random() * choices.length);\r\n        return choices[index];\r\n    },\r\n\r\n    lehmanPeralta(p) {\r\n        var a, result, primo = true;\r\n        var enteros = [...Array(p).keys()];\r\n\r\n        while(primo && (enteros.length > 0)) {\r\n            a = this.choose(enteros);\r\n            enteros.remove(a);\r\n            result = this.expRapida(a, (p-1)/2, p)\r\n            if((result != 1) && (result != p-1)) primo = false;\r\n        }\r\n            \r\n        return primo;\r\n    }\r\n}\r\n\r\nexport default alg;","import alg from './ModExpontentes'\r\n\r\nexport const DyH = function(x_A, x_B, alfa, primo) {\r\n    // 1) Calcular y_A e y_B\r\n    let y_A = alg.expRapida(alfa, x_A, primo); // alfa^(x_A) % primo\r\n    let y_B = alg.expRapida(alfa, x_B, primo); // alfa^(x_B) % primo\r\n\r\n    // 2) Generar clave compartida K\r\n    let K1 = alg.expRapida(y_B, x_A, primo); // y_B^(x_A) % primo\r\n    let K2 = alg.expRapida(y_A, x_B, primo); // y_A^(x_B) % primo\r\n\r\n    if(K1 != K2) alert(\"Error las claves K no son iguales\");\r\n    return {\"K\": K1, \"A\": y_A, \"B\": y_B}; \r\n}","import { DyH } from '../utils/diffie-Hellman.js';\r\nimport alg from '../utils/ModExpontentes'\r\n\r\nexport default class DyH_G {\r\n    constructor(format, elcomuns, secretos) {\r\n        this.format = format;\r\n        this.secretos = JSON.parse(secretos);\r\n        this.elcomuns = JSON.parse(elcomuns);\r\n\r\n        // (secreto_A, secreto_B, alfa, primo) \r\n        let res = DyH(this.secretos.k, this.secretos.x,  this.elcomuns.a, this.elcomuns.p);\r\n        this.K   = res.K;\r\n        this.y_A = res.A;\r\n        this.y_B = res.B;\r\n\r\n        this.C = this.encrypt();\r\n        this.M = this.decrypt();\r\n    }\r\n\r\n    encrypt() {\r\n        return ((this.K *  this.elcomuns.m) % this.elcomuns.p);\r\n    }\r\n\r\n    decrypt() {\r\n        this.invK = alg.euclidExt(this.K,this.elcomuns.p).inverso;\r\n        return ((this.invK * this.K *  this.elcomuns.m) % this.elcomuns.p);\r\n    }\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(JSON.stringify({\r\n            \"yA\": this.y_A,\r\n            \"yB\": this.y_B,\r\n            \"K\": this.K,\r\n            \"C\": this.C,\r\n            \"K‚Åª¬π\": this.invK,\r\n            \"M\": this.M,\r\n        }).replace(/[\\r,]/g, \",  \"));\r\n    }\r\n}","import alg from '../utils/ModExpontentes'\r\nimport { ints, hexs, bins, str } from '../utils/transforms';\r\n\r\nvar alfabeto = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', \r\n                'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n\r\nexport default class RSA {\r\n    constructor(format, data, key) {\r\n        let dat  = JSON.parse(data);\r\n        this.msg = dat.msg;\r\n        this.p   = dat.p;\r\n        this.q   = dat.q;\r\n        this.d   = dat.d;\r\n\r\n        // valores derivados\r\n        this.n   = this.p*this.q;         // n  = p*q\r\n        this.fin = (this.p-1)*(this.q-1); // fi = (p-1)*(q-1)\r\n        this.e   = this.check(this.p,this.q,this.d);\r\n        console.log(`Se calcula e:${this.e}`);\r\n        \r\n        this.tam = this.get_tam();\r\n        console.log(`Como n:${this.n}, se divide el texto en bloques de ${this.tam} caracteres`);\r\n\r\n        console.log(this.codificacionNumerica());\r\n\r\n        this.res = this.encrypt();\r\n    }\r\n\r\n    // operaciones previas\r\n    check(p,q,d) {\r\n        var e = alg.euclidExt(d,this.fin).inverso;\r\n\r\n        console.log(`Se comprueba que p:${this.p} y q:${this.q} son primos`);\r\n        if(!alg.lehmanPeralta(p)){\r\n            console.log(\"Error. p no es primo\")\r\n            return false\r\n        }\r\n\r\n        if(!alg.lehmanPeralta(q)){\r\n            console.log(\"Error. q no es primo\")\r\n            return false\r\n        }\r\n        \r\n        console.log(`Se comprueba que d:${this.d} es primo con fi(n):${this.fin}`);\r\n        if (alg.euclidExt(d,this.fin).inverso == 0){\r\n            var primos = [2, 3, 5, 7, 11];\r\n            for (var i = 0; i < primos.length; i++){\r\n                if (e == primos[i]) break;\r\n                if (e % primos[i] == 0) {\r\n                    console.log(\"Error. d no es primo\")\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        return e;\r\n    }\r\n\r\n    get_tam() {\r\n        var j = 1;\r\n        while(Math.pow(alfabeto.length, j) < this.n) j++;\r\n        return j-1;\r\n    }\r\n\r\n    // codificaci√≥n\r\n    codificacionNumerica() {\r\n        var caracteres = Math.floor(Math.log(this.n)/Math.log(26));\r\n        var letras_to_num = [];\r\n        var bloques_decimal = \"\";\r\n        for (var i = 0; i < this.msg.length; i = i+caracteres) {\r\n            var letra_num = 0;\r\n            var aux = caracteres-1;\r\n            for (var j = 0; j < caracteres; j++){\r\n                if(alfabeto.indexOf(this.msg[i+j]) != -1) {\r\n                    letra_num = alfabeto.indexOf(this.msg[i+j]) * Math.pow(26, aux) + letra_num;\r\n                    aux = aux -1\r\n                }\r\n            }\r\n            bloques_decimal = bloques_decimal + \",\" + letra_num.toString();\r\n            letras_to_num.push(letra_num)\r\n\r\n            \r\n        }\r\n\r\n        var cifrado_array = [];\r\n        var cifrado = \"\"\r\n        for (var i = 0; i < letras_to_num.length; i++) {\r\n            cifrado_array.push(alg.expRapida(this.n,letras_to_num[i],this.e));\r\n            cifrado = cifrado + cifrado_array[i].toString() + ',';\r\n        }\r\n        \r\n        return bloques_decimal.substring(1).split(\",\").map(str => parseInt(str, 10));\r\n    }\r\n\r\n\r\n\r\n    // Encriptar y sesencriptar\r\n    encrypt() {\r\n        this.res = this.codificacionNumerica().map(key => {\r\n            return alg.expRapida(key, this.e, this.n);\r\n        });\r\n        \r\n        return this.res;\r\n    }\r\n\r\n    decrypt() {\r\n        this.res = ints.fromString(this.msg).map(entero => \r\n            alg.expRapida(entero, this.d, this.n)\r\n        );\r\n        return this.res;\r\n    }\r\n\r\n    render() {\r\n        console.log(this.res);\r\n        var a = this.res;\r\n        \r\n        $(`#res-plaintext`).html(str.fromInts(a));\r\n        $(`#res-bin`).html(a.map(a => a.toString(2)).join(\", \"));\r\n        $(`#res-hex`).html(a.map(a => a.toString(16)).join(\", \"));\r\n        $(`#res-int`).html(this.res.join(', '));\r\n    }\r\n\r\n}","import alg from \"../utils/ModExpontentes\"\r\n\r\nArray.range = (n) => Array.apply(null,Array(n)).map((_,i) => i);\r\nArray.prototype.chunk = function(n) {return Array.range(Math.ceil(this.length/n)).map((_,i) => this.slice(i*n,i*n+n));}\r\n\r\nvar mod = function (n, m) {\r\n    var remain = n%m;\r\n    while(remain < 0) remain = remain+m;\r\n    return Math.floor(remain%m);\r\n};\r\n\r\nexport default class Point {\r\n    constructor(x,y) {\r\n        // coordenadas\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    sumar(other,a,p) {\r\n        console.log(`%c ---- Sumar P+Q: (${this.x},${this.y})+(${other.x},${other.y})`, 'color: #bada55');\r\n        var x3,y3;\r\n        if((this.x == other.x) && (this.y == other.y)) {             \r\n            console.log(\"%c       P == Q\", 'color: #bada55');        // IGUALES\r\n            var num = (3*Math.pow(this.x,2)+a)%p;                    // 3*(x1¬≤) + a\r\n            var den = alg.modInverse(2*other.y, p);                  // ((2*y2)^-1) mod p\r\n            console.log(`%c       num =3*${this.x}^${2}+${a} mod ${p} = ${num}`, 'color: #bada55');\r\n            console.log(`%c       den = (2*${other.y})^-1 mod ${p} = ${den}`, 'color: #bada55');\r\n        } else {   \r\n            console.log(\"%c       P != Q\", 'color: #bada55');        // DISTINTOS\r\n            var num = mod(other.y-this.y,p)                          // (y2-y1)  \r\n            var den = alg.modInverse(other.x-this.x, p);             // ((x2-x1)^-1) mod p\r\n            console.log(`%c       num =${other.y}-${this.y} mod ${p} = ${num}`, 'color: #bada55');\r\n            console.log(`%c       den =(${other.x}-${this.x})^-1 mod ${p} = ${den}`, 'color: #bada55');\r\n        } \r\n\r\n        var lambda = ((num*den)%p); \r\n        console.log(`%c       Œª = ${num}*${den} mod ${p} = ${lambda}`, 'color: #bada55');\r\n\r\n        x3 = mod(Math.pow(lambda,2)-this.x-other.x,p)        // Œª¬≤ - x1 - x2\r\n        y3 = mod(lambda*(this.x-x3)-this.y,p)                // Œª* (x1 - x3) -y1\r\n        console.log(`%c       P+Q = (${x3},${y3})`, 'color: #bada55');\r\n\r\n        return new Point(x3, y3);\r\n    }\r\n\r\n    multi(v,a,p) {\r\n        if(v == 0) return undefined;\r\n        switch(v.constructor.name) {\r\n            case 'Number': { // ESCALAR\r\n                console.log(`%c -- Multiplicar ${v}*(${this.x},${this.y})`, 'color: #C2863E');\r\n                var parejas = Array(v).fill(this).chunk(2); // [[P,P],[P,P],[P]]\r\n                while(parejas[0].length > 1) // mientras no sea  [[P]]\r\n                    parejas = parejas.map(tupla => this.multi(tupla,a,p)).chunk(2); //[[P+Q,S+R]...]\r\n                return parejas[0][0]; // [[P]] \r\n            } \r\n\r\n            case 'Array': { // TUPLA\r\n                if(v.length == 1) return v[0];         // [P] -> P\r\n                else return v[0].sumar(v[1],a,p); // [P,Q] -> P+Q\r\n            } \r\n        }\r\n        \r\n    }\r\n}","import Point from \"../utils/point\";\r\nimport alg from \"../utils/ModExpontentes\"\r\n\r\nexport default class DyH_GE {\r\n    constructor(format, data, key) {\r\n        \r\n        // comprobar que G pertenece a la curva 0 <= a,b < p y congruentes \r\n        var data = JSON.parse(data), key = JSON.parse(key);\r\n        var p = data.p, a = data.a, b = data.b, m = data.m; // descomponer objetos\r\n        var G = new Point(key.G[0],key.G[1]); // crear punto base\r\n\r\n        // VALIDAR ENTRADAS\r\n        this.validarEntradas(a,b,G,p);\r\n\r\n        console.log(\"------ Entradas ------\", data, key);\r\n        console.log(\"------ Salidas  ------\");\r\n        // CALCULAR PUNTOS\r\n        this.puntos = this.calcularPuntos(a,b,p);\r\n        console.log(\"Puntos de la curva:\", this.puntos);\r\n        this.buildPLot(a,b); // representar graficamente\r\n\r\n        // CALCULAR CLAVES PUBLICAS\r\n        var CpB = this.keygen(G, key.dB, a, p);\r\n        var CpA = this.keygen(G, key.dA, a, p);\r\n        console.log(`Clave p√∫blica de B = ${key.dB}*(${key.G}):`, CpB);\r\n        console.log(`Clave p√∫blica de A = ${key.dA}*(${key.G}):`, CpA);\r\n        \r\n        // CALCULAR CLAVE COMPARTIDA\r\n        var CcA = this.keygen(CpB, key.dA, a, p);\r\n        var CcB = this.keygen(CpA, key.dB, a, p);\r\n        console.log(\"Clave secreta compartida A:\", CcA);\r\n        console.log(\"Clave secreta compartida B:\", CcB);\r\n\r\n        // CODIFICAR MENSAJE EN FORMATO PUNTO\r\n        var Q = this.codificarMsg(m,p);\r\n        console.log(\"Mensaje codificado:\", Q);\r\n\r\n        // CIFRAR MENSAJE\r\n        this.c = {q:Q, cpa:CpA, db:key.dB, a:a, p:p};\r\n    }\r\n\r\n    calcularPuntos(a,b,p) { //x¬≥+(a)x+(b) mod (p)\r\n        var ey = [], ex = [], puntos = []; // tablas y puntos finales\r\n        // generar valores de x y el residuo cuadr√°tico\r\n        for(let i = 0; i < p; ++i) {                   // i ‚â° x,y\r\n            ex.push([i, (Math.pow(i,3)+(a*i)+(b))%p]); // x, x¬≥+ax+b(mod p)\r\n            ey.push([Math.pow(i,2)%p, i]);             // y¬≤(mod p), y\r\n        }\r\n\r\n        // Determinar puntos coincidentes\r\n        ey.map(py => {\r\n            ex.map(px => { \r\n                if(px[1]==py[0]) puntos.push(new Point(px[0],py[1]));\r\n            })\r\n        });\r\n        return puntos.sort((a,b) => (a.x==b.x)?(a.y-b.y):(a.x-b.x));\r\n    }\r\n\r\n    keygen(P, key, a, p) {return P.multi(key, a, p)}\r\n    \r\n    codificarMsg(m,P) {\r\n        const M = Math.pow(2,m.toString(2).length); //2^(bin.length)\r\n        const h = P/M|0; // entero m√°s cercano  \r\n        console.log(\"M:\", M);\r\n        console.log(`h:`,h,`< ${P}/${M}`);\r\n\r\n        var Q; \r\n        for(let j = 0;  Q == undefined; j++) \r\n            this.puntos.map(p => {\r\n                if((!Q) && (m*h+j == p.x)) Q = p;\r\n            });       \r\n\r\n        return Q;\r\n    }\r\n\r\n    buildPLot(a,b) {\r\n        var xA = [], yA = [];\r\n        this.puntos.map(p => {xA.push(p.x); yA.push(p.y);});\r\n        \r\n        var points = {\r\n            type: 'scatter',\r\n            x: xA,\r\n            y: yA,\r\n            mode: 'markers',\r\n            marker: {\r\n                color: '#28a745',\r\n                line: {\r\n                  color: '#28a745',\r\n                  width: 1,\r\n                },\r\n                symbol: 'circle',\r\n                size: 5\r\n            }\r\n        }\r\n        var xlA = [], ylA = [];\r\n        for(let i = 0; i<10;i++) {\r\n            xlA.push(i);\r\n            ylA.push(Math.sqrt(Math.pow(i,3)+(a*i)+(b)));\r\n            \r\n        }\r\n\r\n        /*var line = {\r\n            x: xlA,\r\n            y: ylA,\r\n            type: 'scatter'\r\n          };*/\r\n\r\n        var data = [points];\r\n        Plotly.newPlot('chart', data);\r\n    }\r\n\r\n    validarEntradas(a,b,G,p) {\r\n        var primo = alg.lehmanPeralta(p), vstr = '';\r\n        console.log(`¬øp:${p} es primo?`,primo); // comprobar que p es primo\r\n        if(!primo) vstr = \" - P no es primo\";\r\n\r\n        var eliptica = ((4*Math.pow(a,3)+27*Math.pow(b,2))%p != 0);\r\n        console.log(`¬ø4a¬≥+27b¬≤ != 0?`,eliptica);  // validar a,b\r\n        if(!eliptica) vstr += \"\\n - La curva el√≠ptica es inv√°lida\";\r\n\r\n        var punto = ((Math.pow(G.y,2))%p == (Math.pow(G.x,3)+a*G.x+b)%p)\r\n        console.log(`¬øG es punto de la curva?`,punto);\r\n        if(!punto && primo) vstr += \"\\n - G no es punto de la cuerva\";\r\n        if(vstr != '') alert(vstr);\r\n    }\r\n\r\n    encrypt() {\r\n        var Q = this.c.q, CpA = this.c.cpa, dB = this.c.db, a = this.c.a, p = this.c.p;\r\n        this.sum = Q.sumar(this.keygen(CpA, dB, a, p),a,p);\r\n        console.log(\"Mensaje cifrado:\", {mc: this.sum, publicKey:CpA});\r\n        return this.sum;\r\n    }\r\n\r\n    decrypt() {}\r\n\r\n    render() {\r\n        $(`#res-plaintext`).html(`(${this.sum.x},${this.sum.y})`);\r\n        //$(`#res-bin`).css(\"background-color\", \"#e9ecef\");\r\n        //$(`#res-hex`).css(\"background-color\", \"#e9ecef\");\r\n        //$(`#res-int`).css(\"background-color\", \"#e9ecef\");\r\n        \r\n    }\r\n}","export default class GE {\r\n    constructor(cipher_key, Plaintext, mode) {\r\n    }\r\n}","import { ints, hexs, bins, str } from './utils/transforms';\r\nimport Vernam     from './alg/0-0-vernam';\r\nimport Vigenere   from './alg/1-0-vigenere';\r\nimport RC4        from './alg/2-0-rc4';\r\nimport A5         from './alg/2-1-a5-1';\r\nimport ChaCha20   from './alg/3-0-chacha20';\r\nimport GenE0      from './alg/4-0-gen-e0';\r\nimport GenCA      from './alg/4-1-gen-ca-gps';\r\nimport Snow3G     from './alg/5-0-multi-snow3g-y-aes';\r\nimport AES        from './alg/6-0-rijndael';\r\nimport CBC        from './alg/7-0-cbc';\r\nimport FiatShamir from './alg/7-1-fiat-shamir';\r\nimport DyH_G      from './alg/8-0-elgamal';\r\nimport RSA        from './alg/9-0-rsa';\r\nimport DyH_GE     from './alg/10-0-diffle&hellman(elgamal el√≠ptico)';\r\nimport GE         from './alg/10-1-gamal-eliptico';\r\n\r\ndisable(1,1,1,1,1,1);\r\nvar objs = [ 0, \r\n    Vernam, Vigenere, RC4, A5, ChaCha20,\r\n    GenE0, GenCA, Snow3G, AES, CBC, FiatShamir, DyH_G, RSA, DyH_GE, GE ];\r\n\r\n// selectores\r\n\r\n\r\n// listeners\r\n$('#algoritmo').children().map(i => createEncrypt(objs[i],  $('#algoritmo').children()[i].innerHTML));\r\n$('#algoritmo').children().map(i => createDecrypt(objs[i],  $('#algoritmo').children()[i].innerHTML));\r\n\r\n// desactivar botones de ejemplos al inicio\r\nif ($('#ej1').is(':checked')) $('#ej2').attr('disabled','disabled'); \r\n\r\n\r\n// inicializaci√≥n\r\n$('#algoritmo').change(() => {\r\n    $('#res-bin').show(); $(\"label[for='res-bin']\").show();\r\n    $('#res-int').show(); $(\"label[for='res-int']\").show();\r\n    $('#res-hex').show(); $(\"label[for='res-hex']\").show();\r\n    switch($('#algoritmo option:selected').val()) { // trataminto de campos y ejemplos\r\n        case \"0\": // Vernam\r\n            active(1,1,1,1,1,1); // activar todo\r\n            disable(1,0,1,0,0,0); // restringir elegir clave (es aleatoria) y forzamos que el formato sea srt\r\n            $(\"#formato\").val('srt');\r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"0\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        $(`#plaintext`).html(\"SOL\");\r\n                        $(`#cipherkey`).html(str.fromBins([\"00111100\", \"00011000\", \"01110011\"]).join(''));\r\n                    } \r\n                    if($('#ej2').is(':checked')) {\r\n                        $(`#plaintext`).html(\"[t\");\r\n                        $(`#cipherkey`).html(str.fromBins([\"00001111\", \"00100001\"]).join(''));\r\n                    }     \r\n                }\r\n            }); \r\n\r\n            ; break;\r\n            \r\n        case \"1\": // Vigeneres\r\n            active(1,1,1,1,1,1);\r\n            disable(0,0,0,0,0,0);  \r\n            $(\"#formato\").val('srt');\r\n            $('#ej2').attr('disabled','disabled');\r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"1\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        $(`#plaintext`).html(\"ESTE MENSAJE SE AUTODESTRUIRA\");\r\n                        $(`#cipherkey`).html(\"MISION\");\r\n                    } \r\n                }\r\n            }); \r\n            ; break;\r\n\r\n        case \"2\": \r\n            ; break;\r\n\r\n        case \"3\":\r\n            ; break;\r\n\r\n        case \"4\": // ChaCha20\r\n            active(1,1,1,1,1,1);\r\n            disable(1,1,0,0,0,0); \r\n            $('#ej2').attr('disabled','disabled');\r\n            $(`#plaintext`).html(\"\");\r\n            $(`#cipherkey`).html(\"00:01:02:03: 04:05:06:07: 08:09:0a:0b: 0c:0d:0e:0f: 10:11:12:13: 14:15:16:17: 18:19:1a:1b: 1c:1d:1e:1f\");\r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"4\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        $(`#plaintext`).html(\"\");\r\n                        $(`#cipherkey`).html(\"00:01:02:03: 04:05:06:07: 08:09:0a:0b: 0c:0d:0e:0f: 10:11:12:13: 14:15:16:17: 18:19:1a:1b: 1c:1d:1e:1f\");\r\n                    }\r\n                }\r\n                \r\n            });\r\n            ; break;\r\n\r\n        case \"5\": \r\n\r\n            ; break;\r\n\r\n        case \"6\": // GenCA\r\n            active(1,1,1,1,1,1);\r\n            disable(1,1,0,0,0,0);\r\n            $(`#cipherkey`).html(JSON.stringify({satelite: 1, longitud: 14}).replace(/[\\r,]/g, \",  \")); \r\n            $('#ej1').attr('disabled','disabled');\r\n            $('#ej2').attr('disabled','disabled');\r\n            ; break;\r\n\r\n        case \"7\": \r\n            ; break;\r\n\r\n        case \"8\":\r\n            ; break;\r\n\r\n        case \"9\": // CBC\r\n            active(1,1,1,1,1,1);\r\n            disable(1,0,0,0,0,0); \r\n            $(\"#formato\").val('hex');\r\n\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"9\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        disable(0,0,1,0,0,0); \r\n                        $(`#plaintext`).html(([\r\n                            \"00\", \"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \r\n                            \"88\", \"99\", \"AA\", \"BB\", \"CC\", \"DD\", \"EE\", \"FF\", \r\n                            \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \r\n                            \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"\r\n                        ]).join(', '));\r\n                        $(`#cipherkey`).html(([\r\n                            \"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\r\n                            \"08\",\"09\",\"0A\",\"0B\",\"0C\",\"0D\",\"0E\",\"0F\"\r\n                        ]).join(', '));\r\n                    } \r\n                    if($('#ej2').is(':checked')) {\r\n                        disable(0,0,1,0,0,0); \r\n                        $(`#plaintext`).html(([\r\n                            \"00\", \"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \r\n                            \"88\", \"99\", \"AA\", \"BB\", \"CC\", \"DD\", \"EE\", \"FF\", \r\n                            \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \r\n                            \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"\r\n                        ]).join(', '));\r\n                        $(`#cipherkey`).html(([\r\n                            \"00\",\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\r\n                            \"08\",\"09\",\"0A\",\"0B\",\"0C\",\"0D\",\"0E\",\"0F\"\r\n                        ]).join(', '));\r\n                    }\r\n                    if($('#manual').is(':checked')) {\r\n                        active(0,0,1,0,0,0); \r\n                    }\r\n                }\r\n            }); \r\n            ; break;\r\n\r\n        case \"10\": // Fiat-Shamir\r\n\r\n            ; break;\r\n\r\n        case \"11\": // ElGamal\r\n            active(1,1,1,1,1,1);\r\n                disable(1,0,0,0,0,0);  \r\n                $(`#plaintext`).html(JSON.stringify({p: 13, a: 4, m: 8}).replace(/[\\r,]/g, \",  \"));\r\n                $(`#cipherkey`).html(JSON.stringify({k: 5, x: 2}).replace(/[\\r,]/g, \",  \"));\r\n                $('#ejemplos').change(() => {\r\n                    if($('#algoritmo option:selected').val() == \"11\") {\r\n                        if($('#ej1').is(':checked')) {\r\n                            disable(1,1,1,0,0,0); \r\n                            $(`#plaintext`).html(JSON.stringify({p: 43, a: 23, m: 18}).replace(/[\\r,]/g, \",  \"));\r\n                            $(`#cipherkey`).html(JSON.stringify({k: 25, x: 33}).replace(/[\\r,]/g, \",  \"));\r\n                        } \r\n                        if($('#ej2').is(':checked')) {\r\n                            disable(1,1,1,0,0,0); \r\n                            $(`#plaintext`).html(JSON.stringify({p: 113, a: 43, m: 28}).replace(/[\\r,]/g, \",  \"));\r\n                            $(`#cipherkey`).html(JSON.stringify({k: 54, x: 71}).replace(/[\\r,]/g, \",  \"));\r\n                        }\r\n                        if($('#manual').is(':checked')) {\r\n                            active(1,1,1,1,1,1);\r\n                            disable(1,0,0,0,0,0); \r\n                            $(`#plaintext`).html(JSON.stringify({p: 13, a: 4, m: 8}).replace(/[\\r,]/g, \",  \"));\r\n                            $(`#cipherkey`).html(JSON.stringify({k: 5, x: 2}).replace(/[\\r,]/g, \",  \"));\r\n                        }\r\n                    }\r\n                });\r\n            ; break;\r\n        \r\n        \r\n        case \"12\": // RSA\r\n            active(1,1,1,1,1,1);\r\n            disable(1,0,0,0,0,0); \r\n\r\n            $('#ej2').attr('disabled','disabled');\r\n            $(`#plaintext`).html(JSON.stringify({msg: \"MANDA DINEROS\", p: 421, q: 7, d: 1619}).replace(/[\\r,]/g, \",  \"));\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"12\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        disable(1,1,1,0,0,0); \r\n                        $(`#plaintext`).html(JSON.stringify({msg: \"AMIGO MIO\", p: 2347, q: 347, d: 5}).replace(/[\\r,]/g, \",  \"));\r\n                    } \r\n                    if($('#manual').is(':checked')) {\r\n                        active(1,1,1,1,1,1);\r\n                        disable(1,0,0,0,0,0); \r\n                        $(`#plaintext`).html(JSON.stringify({msg: \"MANDA DINEROS\", p: 421, q: 7, d: 1619}).replace(/[\\r,]/g, \",  \"));\r\n                    }\r\n                }\r\n            });\r\n            ; break;\r\n\r\n        case \"13\": // DyH_GE\r\n            active(1,1,1,1,1,1);\r\n            disable(1,0,0,0,0,0);\r\n            $('#res-bin').hide(); $(\"label[for='res-bin']\").hide();\r\n            $('#res-int').hide(); $(\"label[for='res-int']\").hide();\r\n            $('#res-hex').hide(); $(\"label[for='res-hex']\").hide();\r\n            //alert(\"Este algoritmo utiliza la curva el√≠ptica E: y¬≤= x¬≥ + ax + b\");\r\n\r\n            $('#ej2').attr('disabled','disabled');\r\n            $('#ejemplos').change(() => {\r\n                if($('#algoritmo option:selected').val() == \"13\") {\r\n                    if($('#ej1').is(':checked')) {\r\n                        disable(1,1,1,0,0,0); \r\n                        $(`#plaintext`).html(JSON.stringify({p: 13, a: 5, b: 3, m: 2}).replace(/[\\r,]/g, \",  \"));\r\n                        $(`#cipherkey`).html(JSON.stringify({dA: 4, dB: 2, G: [9,6]}).replace(/[\\r,]/g, \",  \"));\r\n                    } \r\n\r\n                    if($('#manual').is(':checked')) {\r\n                        active(1,1,1,1,1,1);\r\n                        disable(1,0,0,0,0,0); \r\n                    }\r\n                }\r\n            });\r\n            ; break;\r\n\r\n        case \"14\":\r\n            ; break;\r\n\r\n        default:\r\n            $('#cipherkey').attr('disabled','disabled');\r\n            $('#plaintext').attr('disabled','disabled');\r\n            $('#encrypt').attr('disabled','disabled');\r\n            ; break;\r\n\r\n    }\r\n});\r\n\r\nfunction disable(formato, plaintext, key, enc, des, ej) {\r\n    if(formato)   $('#formato').attr('disabled','disabled');\r\n    if(plaintext) $('#plaintext').attr('disabled','disabled');\r\n    if(key)       $('#cipherkey').attr('disabled','disabled');\r\n    if(enc)       $('#encrypt').attr('disabled','disabled');\r\n    if(des)       $('#decrypt').attr('disabled','disabled');\r\n    if(ej)        $('.form-check-input').attr('disabled','disabled');\r\n}\r\n\r\n\r\nfunction active(formato, plaintext, key, enc, des, ej) {\r\n    if(formato)   $('#formato').removeAttr('disabled');\r\n    if(plaintext) $('#plaintext').removeAttr('disabled');\r\n    if(key)       $('#cipherkey').removeAttr('disabled');\r\n    if(enc)       $('#encrypt').removeAttr('disabled');\r\n    if(des)       $('#decrypt').removeAttr('disabled');\r\n    if(ej)        $('.form-check-input').removeAttr('disabled');\r\n}\r\n\r\nfunction createEncrypt(obj, tag) {\r\n    $(`#encrypt`).click(() => {\r\n        if($('#algoritmo option:selected').text() == tag) {\r\n            console.clear();\r\n            let tmp = new obj($('#formato option:selected').val(), $(\"#plaintext\").val(), $(\"#cipherkey\").val());\r\n            tmp.res = tmp.encrypt();\r\n            tmp.render();\r\n        }\r\n    });    \r\n}\r\n\r\nfunction createDecrypt(obj, tag) {\r\n    $(`#decrypt`).click(() => {\r\n        if($('#algoritmo option:selected').text() == tag) {\r\n            let tmp = new obj($('#formato option:selected').val(), $(\"#plaintext\").val(), $(\"#cipherkey\").val());\r\n            tmp.res = tmp.decrypt();\r\n            tmp.render();\r\n        }\r\n    });    \r\n}"]}